<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: testing | draptik]]></title>
  <link href="http://draptik.github.io/blog/categories/testing/atom.xml" rel="self"/>
  <link href="http://draptik.github.io/"/>
  <updated>2018-09-15T21:09:00+00:00</updated>
  <id>http://draptik.github.io/</id>
  <author>
    <name><![CDATA[Patrick Drechsler]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[F# Test Setup for FizzBuzz]]></title>
    <link href="http://draptik.github.io/blog/2018/02/07/fsharp-test-setup-for-fizzbuzz/"/>
    <updated>2018-02-07T20:53:43+00:00</updated>
    <id>http://draptik.github.io/blog/2018/02/07/fsharp-test-setup-for-fizzbuzz</id>
    <content type="html"><![CDATA[<p>In my <a href="http://draptik.github.io/blog/2018/02/05/fsharp-setup-linux-fizzbuzz/">previous post</a> we setup a basic F# project in Linux.</p>

<p>In this post I would like to show how to setup an idiomatic F# testing environment using FsUnit.</p>

<h4>Side note for people unfamiliar with .NET</h4>

<p>Actually, it&rsquo;s not a project, but a &ldquo;solution&rdquo;. To clear things up for people not familiar with the .NET ecosystem: In .NET, the top level configuration is called a &ldquo;solution&rdquo; and resides in a <code>*.sln</code> file. A solution references &ldquo;projects&rdquo;. Each project configuration is stored in a <code>*.fsproj</code> file (F#) or a <code>*.csproj</code> file (C#). Projects can reference each other. This information is stored in the <code>*.[f|c]sproj</code> file.</p>

<p>We have 2 projects (<code>FizzBuzz</code> and <code>FizzBuzz.Tests</code>), each with a <code>*.fsproj</code> file. The <code>FizzBuzz.Tests.fsproj</code> references the <code>FizzBuzz.fsproj</code> file (see the <a href="http://draptik.github.io/blog/2018/02/05/fsharp-setup-linux-fizzbuzz/">previous post</a> for details):
<code>
.
├── FizzBuzz
│   ├── FizzBuzz.fsproj
│   ├── ...
├── FizzBuzz.Tests
│   ├── FizzBuzz.Tests.fsproj
│   ├── ...
└── fsharp-kata-fizzbuzz.sln
</code></p>

<h3>Current state</h3>

<p>This is the current state of our test:
<code>`fsharp
[&lt;Fact&gt;]
let</code>Array with Number 1 returns &lsquo;one&rsquo;`` () =</p>

<pre><code>let result = FizzBuzz.Generate [1]
Assert.Equal(result, "one")
</code></pre>

<p>```</p>

<ul>
<li><code>[&lt;Fact&gt;]</code>: this is F#&rsquo;s annotation style. The same as C# <code>[Fact]</code> or Java <code>@Fact</code></li>
<li><code>Array with Number 1 returns 'one'</code>: Method name in double back-ticks improves readability, especially in unit tests. No CamelCasing or snake_casing needed. It&rsquo;s an F# language feature.</li>
<li><code>Assert.Equal(...)</code>: This is probably familiar to everyone who has ever written a unit test. Every assertion library has a different signature: Is it <code>Equal(expected, actual)</code> or <code>Equal(actual, expected)</code>? I hate this! Thankfully there are alternative assertion libraries. Example: In C# you can write <code>actual.Should().Be(expected)</code> (using <a href="http://fluentassertions.com/"><code>FluentAssertions</code></a>). The same is true for F#.</li>
</ul>


<h3>FsUnit: Idiomatic assertions</h3>

<p>What does &ldquo;idiomatic&rdquo; mean? For programming languages, it means: Writing code as most people, who are used to the language, would write the code (how a &ldquo;native&rdquo; would express an idea, a concept, an algorithm, etc). Simple example: In Java and JS, the first character of a method name should be lower case. In C#, the first character should be upper case (yes, even if the method is private!). The code will still compile if you don&rsquo;t comply to these conventions, but it&rsquo;s not &ldquo;idiomatic&rdquo;. Same goes for &ldquo;For Loops&rdquo; vs using a &ldquo;Map&rdquo; functions: In some languages one concept is preferred over the other.</p>

<p><code>FsUnit</code> brings <strong>pipes</strong> to F# unit tests. Pipes are used extensively in F# and should be familiar to most linux shell users: Bash uses the <code>|</code> symbol as operator to redirect the output of one expression to the input of another expression. In F# the pipe operator is <code>|&gt;</code>. The concept might seem similar to using &ldquo;Method Chaining&rdquo; in C# (it&rsquo;s not, but close enough in this context).</p>

<p>Example:
```fsharp
// instead of
Assert.Equal(1 + 1, 2)</p>

<p>// idiomatic F# (using pipe) with FsUnit:
1 + 1 |> should equal 2
```</p>

<h4>Installing FsUnit</h4>

<p><code>sh
cd FizzBuzz.Tests
dotnet add package FsUnit.Xunit
</code></p>

<p>File <code>FizzBuzz.Tests/FizzBuzz.Tests.fsproj</code> should now look like this (plus/minus some version numbers):
```xml
<Project Sdk="Microsoft.NET.Sdk"></p>

<p>  <PropertyGroup></p>

<pre><code>&lt;TargetFramework&gt;netcoreapp2.0&lt;/TargetFramework&gt;

&lt;IsPackable&gt;false&lt;/IsPackable&gt;
</code></pre>

<p>  </PropertyGroup></p>

<p>  <ItemGroup></p>

<pre><code>&lt;Compile Include="Tests.fs" /&gt;
&lt;Compile Include="Program.fs" /&gt;
</code></pre>

<p>  </ItemGroup></p>

<p>  <ItemGroup></p>

<pre><code>&lt;PackageReference Include="FsUnit.Xunit" Version="3.0.0" /&gt;
&lt;PackageReference Include="Microsoft.NET.Test.Sdk" Version="15.5.0" /&gt;
&lt;PackageReference Include="xunit" Version="2.3.1" /&gt;
&lt;PackageReference Include="xunit.runner.visualstudio" Version="2.3.1" /&gt;
&lt;DotNetCliToolReference Include="dotnet-xunit" Version="2.3.1" /&gt;
</code></pre>

<p>  </ItemGroup></p>

<p>  <ItemGroup></p>

<pre><code>&lt;ProjectReference Include="..\FizzBuzz\FizzBuzz.fsproj" /&gt;
</code></pre>

<p>  </ItemGroup></p>

<p></Project>
```</p>

<p>Note the line <code>&lt;PackageReference Include="FsUnit.Xunit" Version="3.0.0" /&gt;</code> (your version number might differ).</p>

<h4>Using FsUnit</h4>

<p>Modify the test file <code>FizzBuzz.Tests/Tests.fs</code> to look like this:
```fsharp
module Tests</p>

<p>open System
open FsUnit.Xunit // &lt;&mdash; add FsUnit.Xunit
open Xunit
open FizzBuzz</p>

<p>[<Fact>]
let <code>Array with Number 1 returns 'one'</code> () =</p>

<pre><code>FizzBuzz.Generate [1] 
|&gt; should equal "one" // using "|&gt;" and "should" syntax
</code></pre>

<p>```</p>

<p>Running the unit tests within the test folder:</p>

<p>```sh
dotnet test
Build started, please wait&hellip;
Build completed.</p>

<p>Test run for /home/patrick/projects/fsharp-blog-fizzbuzz/fsharp-kata-fizzbuzz/FizzBuzz.Tests/bin/Debug/netcoreapp2.0/FizzBuzz.Tests.dll(.NETCoreApp,Version=v2.0)
Microsoft &reg; Test Execution Command Line Tool Version 15.5.0
Copyright &copy; Microsoft Corporation.  All rights reserved.</p>

<p>Starting test execution, please wait&hellip;
[xUnit.net 00:00:00.7436128]   Discovering: FizzBuzz.Tests
[xUnit.net 00:00:00.8627111]   Discovered:  FizzBuzz.Tests
[xUnit.net 00:00:00.8695487]   Starting:    FizzBuzz.Tests
[xUnit.net 00:00:01.1888259]   Finished:    FizzBuzz.Tests</p>

<p>Total tests: 1. Passed: 1. Failed: 0. Skipped: 0.
Test Run Successful.
Test execution time: 2.4787 Seconds
```</p>

<h3>Summary</h3>

<p>We can now write unit tests in an F# way (&ldquo;idiomatic&rdquo;) by using the library <code>FsUnit</code>.</p>

<p>Have fun with F# and linux!</p>

<p>Get the source code <a href="https://github.com/draptik/blog-fsharp-fizzbuzz-setup">here</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Testing that different objects have the same properties]]></title>
    <link href="http://draptik.github.io/blog/2016/05/09/testing-objects-have-same-properties/"/>
    <updated>2016-05-09T17:25:17+00:00</updated>
    <id>http://draptik.github.io/blog/2016/05/09/testing-objects-have-same-properties</id>
    <content type="html"><![CDATA[<p>Sometimes you want to ensure that 2 unrelated objects share a set of properties &mdash; without using an interface.</p>

<p>Here is an example:</p>

<p>``` csharp
namespace Demo
{</p>

<pre><code>public class Customer
{
    public string FirstName { get; set; }
    public string LastName { get; set; }
}

public class Person
{
    public string FirstName { get; set; }
    public string LastName { get; set; }
}
</code></pre>

<p>}
```
First thought for C# developers: <a href="http://automapper.org/">AutoMapper</a></p>

<p>Let&rsquo;s do that:</p>

<p>``` csharp
using AutoMapper;</p>

<p>namespace Demo
{</p>

<pre><code>public class MyMapping
{
    public static IMapper Mapper;

    public static void Init()
    {
        var cfg = new MapperConfiguration(x =&gt;
        {
            x.CreateMap&lt;Customer, Person&gt;();
        });
        Mapper = cfg.CreateMapper();
    }
}
</code></pre>

<p>}
```</p>

<p>Now we can write a unit test to see if we can convert a Customer to a Person:</p>

<p>``` csharp
using Xunit;</p>

<p>namespace Demo
{</p>

<pre><code>public class SomeTests
{
    [Fact]
    public void Given_Customer_Should_ConvertTo_Person()
    {
        // Arrange
        const string firstname = "foo";
        const string lastname = "bar";

        var customer = new Customer
        {
            FirstName = firstname,
            LastName = lastname
        };

        MyMapping.Init();

        // Act
        var person = MyMapping.Mapper.Map&lt;Customer, Person&gt;(customer);

        // Assert
        person.FirstName.Should().Be(firstname);
        person.LastName.Should().Be(lastname);
    }
}
</code></pre>

<p>} <br/>
```
This test passes.</p>

<p>But what happens when we want to ensure that a new Customer property (for example <code>Email</code>) is reflected in the Person object?</p>

<p>``` csharp
namespace Demo
{</p>

<pre><code>public class Customer
{
    public string FirstName { get; set; }
    public string LastName { get; set; }
    public string Email { get; set; } // &lt;-- new property
}

public class Person
{
    public string FirstName { get; set; }
    public string LastName { get; set; }
}
</code></pre>

<p>}
```</p>

<p>Our unit test still passes. &#9785;</p>

<p><strong>Wouldn&rsquo;t it be nice to have our unit test fail if the classes are not in sync?</strong></p>

<p>Here is where <a href="http://www.fluentassertions.com/">FluentAssertions</a> <code>ShouldBeEquivalentTo</code> comes in handy:</p>

<p>``` csharp
using FluentAssertions;
using Xunit;</p>

<p>[Fact]
public void Given_Customer_Should_ConvertTo_Person_With_CurrentProperties()
{</p>

<pre><code>//Arrange
const string firstname = "foo";
const string lastname = "bar";

var customer = new Customer
{
    FirstName = firstname,
    LastName = lastname,
    Email = "foo@bar.com"
};

MyMapping.Init();

// Act
var person = MyMapping.Mapper.Map&lt;Customer, Person&gt;(customer);

// Assert
customer.ShouldBeEquivalentTo(person);
</code></pre>

<p>}
```</p>

<p><img src="/images/posts/dotnet/equivalentto_result.png"></p>

<p><code>Subject has a member  Email that the other object does not have.</code></p>

<p>Cool: This is the kind of message I want to have from a unit test!</p>

<p><code>ShouldBeEquivalentTo</code> also takes an optional Lambda expression in case you need more fine grained control which properties are included in the comparison. Here is an example where we exlude the <code>Email</code> property on purpose:</p>

<p>``` csharp
using FluentAssertions;
using Xunit;</p>

<p>[Fact]
public void Given_Customer_Should_ConvertTo_Person_With_CurrentProperties_Excluding_Email()
{</p>

<pre><code>//Arrange
const string firstname = "foo";
const string lastname = "bar";

var customer = new Customer
{
    FirstName = firstname,
    LastName = lastname,
    Email = "foo@bar.com"
};

MyMapping.Init();

// Act
var person = MyMapping.Mapper.Map&lt;Customer, Person&gt;(customer);

// Assert
customer.ShouldBeEquivalentTo(person,
    options =&gt;
        options.Excluding(x =&gt; x.Email));
</code></pre>

<p>}
```</p>

<p>This test passes.</p>

<p>The complete documentation for FluentAssertions' <code>ShouldBeEquivalentTo</code> method can be found <a href="https://github.com/dennisdoomen/fluentassertions/wiki#object-graph-comparison">here</a>.</p>

<h2>Source code for this post</h2>

<p>You can clone a copy of this project here: <a href="https://github.com/draptik/blog-demo-shouldbeequivalentto">https://github.com/draptik/blog-demo-shouldbeequivalentto</a>.</p>

<p><code>sh
git clone https://github.com/draptik/blog-demo-shouldbeequivalentto.git
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Unit testing RESTful services]]></title>
    <link href="http://draptik.github.io/blog/2013/07/19/unit-testing-restful-services/"/>
    <updated>2013-07-19T13:18:00+00:00</updated>
    <id>http://draptik.github.io/blog/2013/07/19/unit-testing-restful-services</id>
    <content type="html"><![CDATA[<p>In my two previous posts I gave an introduction on how to <a href="http://draptik.github.io/blog/2013/07/13/angularjs-example-using-a-java-restful-web-service/">consume a RESTful web service with AngularJS created by a Java backend</a> and <a href="http://draptik.github.io/blog/2013/07/18/guice-in-java-web-application/">use Guice in the Java backend</a>.</p>

<p>In this post I will show how to create a unit test for this web service.</p>

<p>Most of this code is inspired by a <a href="https://sites.google.com/a/athaydes.com/renato-athaydes//posts/jersey_guice_rest_api">blog post from Paulo Renato de Athaydes</a>.</p>

<p>We will need to install some new dependencies:</p>

<ul>
<li><code>jetty-maven-plugin</code></li>
<li><code>junit</code></li>
<li><code>jersey-client</code></li>
<li><code>jersey-grizzly2</code></li>
</ul>


<p><a href="https://grizzly.java.net/">Grizzly</a> will be our web server for testing.</p>

<p>``` xml pom.xml
&lt;?xml version=&ldquo;1.0&rdquo; encoding=&ldquo;UTF-8&rdquo;?>
&lt;project xmlns=&ldquo;<a href="http://maven.apache.org/POM/4.0.0">http://maven.apache.org/POM/4.0.0</a>&rdquo; xmlns:xsi=&ldquo;<a href="http://www.w3.org/2001/XMLSchema-instance">http://www.w3.org/2001/XMLSchema-instance</a>&rdquo;</p>

<pre><code>     xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd"&gt;
&lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;

&lt;name&gt;ngdemo Maven Webapp&lt;/name&gt;
&lt;groupId&gt;ngdemo&lt;/groupId&gt;
&lt;artifactId&gt;ngdemo&lt;/artifactId&gt;
&lt;packaging&gt;war&lt;/packaging&gt;
&lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;

&lt;properties&gt;
    &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;
    &lt;jersey.version&gt;1.17.1&lt;/jersey.version&gt;
    &lt;guice.version&gt;3.0&lt;/guice.version&gt;
&lt;/properties&gt;

&lt;build&gt;
    &lt;finalName&gt;ngdemo&lt;/finalName&gt;
    &lt;plugins&gt;
        &lt;plugin&gt;
            &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;
            &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;
            &lt;version&gt;3.0&lt;/version&gt;
            &lt;configuration&gt;
                &lt;source&gt;1.7&lt;/source&gt;
                &lt;target&gt;1.7&lt;/target&gt;
            &lt;/configuration&gt;
        &lt;/plugin&gt;
        &lt;plugin&gt;
            &lt;groupId&gt;org.mortbay.jetty&lt;/groupId&gt;
            &lt;artifactId&gt;jetty-maven-plugin&lt;/artifactId&gt;
            &lt;version&gt;8.1.11.v20130520&lt;/version&gt;
            &lt;configuration&gt;
                &lt;scanIntervalSeconds&gt;10&lt;/scanIntervalSeconds&gt;
                &lt;connectors&gt;
                    &lt;connector implementation="org.eclipse.jetty.nio.SelectChannelConnector"&gt;
                        &lt;port&gt;8080&lt;/port&gt;
                        &lt;maxIdleTime&gt;60000&lt;/maxIdleTime&gt;
                    &lt;/connector&gt;
                &lt;/connectors&gt;
                &lt;stopKey/&gt;
                &lt;stopPort/&gt;
            &lt;/configuration&gt;
        &lt;/plugin&gt;
    &lt;/plugins&gt;
&lt;/build&gt;

&lt;dependencies&gt;

    &lt;!-- javax: XML binding --&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;javax.xml.bind&lt;/groupId&gt;
        &lt;artifactId&gt;jaxb-api&lt;/artifactId&gt;
        &lt;version&gt;2.1&lt;/version&gt;
    &lt;/dependency&gt;

    &lt;!-- RESTful web service: Jersey ====================================== --&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;com.sun.jersey&lt;/groupId&gt;
        &lt;artifactId&gt;jersey-server&lt;/artifactId&gt;
        &lt;version&gt;${jersey.version}&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;com.sun.jersey&lt;/groupId&gt;
        &lt;artifactId&gt;jersey-servlet&lt;/artifactId&gt;
        &lt;version&gt;${jersey.version}&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;com.sun.jersey&lt;/groupId&gt;
        &lt;artifactId&gt;jersey-json&lt;/artifactId&gt;
        &lt;version&gt;${jersey.version}&lt;/version&gt;
    &lt;/dependency&gt;

    &lt;!-- Guice ============================================================= --&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;com.google.inject&lt;/groupId&gt;
        &lt;artifactId&gt;guice&lt;/artifactId&gt;
        &lt;version&gt;${guice.version}&lt;/version&gt;
    &lt;/dependency&gt;

    &lt;dependency&gt;
        &lt;groupId&gt;com.google.inject.extensions&lt;/groupId&gt;
        &lt;artifactId&gt;guice-servlet&lt;/artifactId&gt;
        &lt;version&gt;${guice.version}&lt;/version&gt;
    &lt;/dependency&gt;

    &lt;dependency&gt;
        &lt;groupId&gt;com.sun.jersey.contribs&lt;/groupId&gt;
        &lt;artifactId&gt;jersey-guice&lt;/artifactId&gt;
        &lt;version&gt;${jersey.version}&lt;/version&gt;
    &lt;/dependency&gt;

    &lt;!-- Required for bypassing web.xml via Guice. Used in TestServlet.java --&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;javax.servlet&lt;/groupId&gt;
        &lt;artifactId&gt;javax.servlet-api&lt;/artifactId&gt;
        &lt;version&gt;3.0.1&lt;/version&gt;
        &lt;scope&gt;provided&lt;/scope&gt;
    &lt;/dependency&gt;


    &lt;!-- Unit testing ====================================================== --&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;junit&lt;/groupId&gt;
        &lt;artifactId&gt;junit&lt;/artifactId&gt;
        &lt;version&gt;4.11&lt;/version&gt;
        &lt;scope&gt;test&lt;/scope&gt;
    &lt;/dependency&gt;

    &lt;dependency&gt;
        &lt;groupId&gt;com.sun.jersey&lt;/groupId&gt;
        &lt;artifactId&gt;jersey-client&lt;/artifactId&gt;
        &lt;version&gt;${jersey.version}&lt;/version&gt;
        &lt;scope&gt;test&lt;/scope&gt;
    &lt;/dependency&gt;

    &lt;dependency&gt;
        &lt;groupId&gt;com.sun.jersey&lt;/groupId&gt;
        &lt;artifactId&gt;jersey-grizzly2&lt;/artifactId&gt;
        &lt;version&gt;${jersey.version}&lt;/version&gt;
        &lt;scope&gt;test&lt;/scope&gt;
    &lt;/dependency&gt;
&lt;/dependencies&gt;
</code></pre>

<p></project>
```</p>

<p>Our class under test is <code>UserRestService.java</code>:</p>

<p>``` java UserRestService.java
package ngdemo.rest;</p>

<p>import com.google.inject.Inject;
import ngdemo.domain.User;
import ngdemo.service.contract.UserService;</p>

<p>import javax.ws.rs.GET;
import javax.ws.rs.Path;
import javax.ws.rs.Produces;
import javax.ws.rs.core.MediaType;</p>

<p>@Path(&ldquo;/users&rdquo;)
public class UserRestService {</p>

<pre><code>private final UserService userService;

@Inject
public UserRestService(UserService userService) {
    this.userService = userService;
}

@GET
@Produces(MediaType.APPLICATION_JSON)
public User getDefaultUserInJSON() {
    return userService.getDefaultUser();
}
</code></pre>

<p>}
```</p>

<p>Here is the corresponding unit test class <code>UserRestServiceTest.java</code>:</p>

<p>``` java UserRestServiceTest.java
package ngdemo.tests;</p>

<p>import com.google.inject.Guice;
import com.google.inject.Injector;
import com.google.inject.servlet.ServletModule;
import com.sun.jersey.api.client.Client;
import com.sun.jersey.api.client.ClientResponse;
import com.sun.jersey.api.client.WebResource;
import com.sun.jersey.api.client.config.DefaultClientConfig;
import com.sun.jersey.api.container.grizzly2.GrizzlyServerFactory;
import com.sun.jersey.api.core.PackagesResourceConfig;
import com.sun.jersey.api.core.ResourceConfig;
import com.sun.jersey.core.spi.component.ioc.IoCComponentProviderFactory;
import com.sun.jersey.guice.spi.container.GuiceComponentProviderFactory;
import ngdemo.repositories.contract.UserRepository;
import ngdemo.repositories.impl.UserRepositoryImpl;
import ngdemo.service.contract.UserService;
import ngdemo.service.impl.UserServiceImpl;
import org.glassfish.grizzly.http.server.HttpServer;
import org.junit.After;
import org.junit.Before;
import org.junit.Test;</p>

<p>import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.UriBuilder;
import java.io.IOException;
import java.net.URI;</p>

<p>import static junit.framework.Assert.assertEquals;</p>

<p>public class UserRestServiceTest {</p>

<pre><code>static final URI BASE_URI = getBaseURI();
HttpServer server;

private static URI getBaseURI() {
    return UriBuilder.fromUri("http://localhost/").port(9998).build();
}

@Before
public void startServer() throws IOException {
    System.out.println("Starting grizzly...");

    Injector injector = Guice.createInjector(new ServletModule() {
        @Override
        protected void configureServlets() {
            bind(UserService.class).to(UserServiceImpl.class);
            bind(UserRepository.class).to(UserRepositoryImpl.class);
        }
    });

    ResourceConfig rc = new PackagesResourceConfig("ngdemo.rest");
    IoCComponentProviderFactory ioc = new GuiceComponentProviderFactory(rc, injector);
    server = GrizzlyServerFactory.createHttpServer(BASE_URI + "rest/", rc, ioc);

    System.out.println(String.format("Jersey app started with WADL available at "
            + "%srest/application.wadl\nTry out %sngdemo\nHit enter to stop it...",
            BASE_URI, BASE_URI));
}

@After
public void stopServer() {
    server.stop();
}

@Test
public void testGetDefaultUser() throws IOException {
    Client client = Client.create(new DefaultClientConfig());
    WebResource service = client.resource(getBaseURI());
    ClientResponse resp = service.path("rest").path("users")
            .accept(MediaType.APPLICATION_JSON)
            .get(ClientResponse.class);
    System.out.println("Got stuff: " + resp);
    String text = resp.getEntity(String.class);

    assertEquals(200, resp.getStatus());
    assertEquals("{\"firstName\":\"JonFromREST\",\"lastName\":\"DoeFromREST\"}", text);
}
</code></pre>

<p>}
```</p>

<p>In the <code>startServer</code> method we create an injector for Guice, which we can then pass into the <code>GuiceComponentProviderFactory</code> to create the inversion of control (IoC) container.</p>

<p>Together with the <code>ResourceConfig</code> the IoC container is passed to Grizzly&rsquo;s server factory to create the web server for testing.</p>

<p>Within the actual test method <code>testGetDefaultUser</code> we only have to setup the Jersey <code>Client</code> to retrieve the response (from the Grizzly server).</p>

<p>Here&rsquo;s the test output from Maven:</p>

<p>``` sh
$ mvn test</p>

<h2>&hellip;</h2>

<h2> T E S T S</h2>

<p>Running ngdemo.tests.UserRestServiceTest
Starting grizzly&hellip;
Jul 19, 2013 1:50:35 PM com.sun.jersey.api.core.PackagesResourceConfig init
INFO: Scanning for root resource and provider classes in the packages:
  ngdemo.rest
Jul 19, 2013 1:50:35 PM com.sun.jersey.api.core.ScanningResourceConfig logClasses
INFO: Root resource classes found:
  class ngdemo.rest.UserRestService
Jul 19, 2013 1:50:35 PM com.sun.jersey.api.core.ScanningResourceConfig init
INFO: No provider classes found.
Jul 19, 2013 1:50:35 PM com.sun.jersey.server.impl.application.WebApplicationImpl _initiate
INFO: Initiating Jersey application, version &lsquo;Jersey: 1.17.1 02/28/2013 12:47 PM&rsquo;
Jul 19, 2013 1:50:36 PM com.sun.jersey.guice.spi.container.GuiceComponentProviderFactory getComponentProvider
INFO: Binding ngdemo.rest.UserRestService to GuiceInstantiatedComponentProvider
Jul 19, 2013 1:50:37 PM org.glassfish.grizzly.http.server.NetworkListener start
INFO: Started listener bound to [localhost:9998]
Jul 19, 2013 1:50:37 PM org.glassfish.grizzly.http.server.HttpServer start
INFO: [HttpServer] Started.
Jersey app started with WADL available at <a href="http://localhost:9998/rest/application.wadl">http://localhost:9998/rest/application.wadl</a>
Try out <a href="http://localhost:9998/ngdemo">http://localhost:9998/ngdemo</a>
Hit enter to stop it&hellip;
Got stuff: GET <a href="http://localhost:9998/rest/users">http://localhost:9998/rest/users</a> returned a response status of 200 OK
Jul 19, 2013 1:50:37 PM org.glassfish.grizzly.http.server.NetworkListener stop
INFO: Stopped listener bound to [localhost:9998]
Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 2.604 sec</p>

<p>Results :</p>

<p>Tests run: 1, Failures: 0, Errors: 0, Skipped: 0</p>

<p>[INFO] &mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;
[INFO] BUILD SUCCESS
[INFO] &mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;
[INFO] Total time: 6.378s
```</p>

<p>Test time is 2.6 sec. Not bad considering we are starting a web server, deploying our app, creating a client, running the test and shutting down the web server.</p>

<p>Running this test from within IntelliJ takes: 0.009 sec&hellip;</p>

<p>You can clone a copy of this project here: <a href="https://github.com/draptik/angulardemorestful">https://github.com/draptik/angulardemorestful</a>.</p>

<p>To checkout the correct version for this demo, use the following code:</p>

<p><code>sh
git clone git@github.com:draptik/angulardemorestful.git
cd angulardemorestful
git checkout -f step3-backend-test
</code></p>

<p>In case you are not using git you can also download the project as ZIP or tar.gz file here: <a href="https://github.com/draptik/angulardemorestful/releases/tag/step3-backend-test">https://github.com/draptik/angulardemorestful/releases/tag/step3-backend-test</a></p>
]]></content>
  </entry>
  
</feed>
