<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: docker | draptik]]></title>
  <link href="http://draptik.github.io/blog/categories/docker/atom.xml" rel="self"/>
  <link href="http://draptik.github.io/"/>
  <updated>2018-01-04T01:22:15+00:00</updated>
  <id>http://draptik.github.io/</id>
  <author>
    <name><![CDATA[Patrick Drechsler]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Docker and Octopress]]></title>
    <link href="http://draptik.github.io/blog/2017/04/04/docker-and-octopress/"/>
    <updated>2017-04-04T18:41:51+00:00</updated>
    <id>http://draptik.github.io/blog/2017/04/04/docker-and-octopress</id>
    <content type="html"><![CDATA[<p>This post describes how I created my first customized docker image(s).</p>

<p>I have been watching the <a href="https://www.docker.com/">docker</a> space for a while and finally found a private use-case: This blog uses <a href="http://octopress.org/">Octopress</a>, which is a ruby-based convenience-wrapper around Jekyll.
<a href="https://jekyllrb.com/">Jekyll</a> is a static web-site generator provided by <a href="https://github.com/jekyll/jekyll">GitHub</a>.
Octopress requires some old libs: Ruby 1.9.3, Python 2.7, and nodejs.</p>

<p>So, to use Octopress on any machine, I have to either:</p>

<ul>
<li>configure the machine to use specific versions of Ruby, Python and NodeJs. Works.

<ul>
<li>Drawback: Other projects using different versions of Ruby, Python, NodeJs won&rsquo;t work out of the box.</li>
</ul>
</li>
<li>use version managers for Ruby, Python and NodeJs (f.ex. <a href="https://rvm.io/"><code>rvm</code></a>, <a href="http://fgimian.github.io/blog/2012/12/08/setting-up-virtual-development-environments-for-python/"><code>virtualenv</code></a>, <a href="https://github.com/creationix/nvm"><code>nvm</code></a>). Works.

<ul>
<li>Drawback: Tedious setup which differs between OSes.</li>
</ul>
</li>
<li>use a virtual machine. Works.

<ul>
<li>Drawback: Not easily portable due to size of virtual machine image.</li>
</ul>
</li>
<li>Or, I could use docker.</li>
</ul>


<p>I decided to give docker a spin.</p>

<p><strong>My primary goal was to be able to blog from any (linux) machine running docker.</strong></p>

<p>From a birds-eye view my goal is to:</p>

<ul>
<li>install a docker image on any machine</li>
<li>and run a docker container with my blog mounted as shared folder (so I can edit the content on the host system, but compilation, preview and publishing is accomplished from within the docker container)</li>
</ul>


<p><strong>My secondary goal was to get my hands dirty with docker :&ndash;)</strong></p>

<p>Obviously docker also has potential usage for other development setups (i.e. testing application code in local docker container before pushing to CI to reduce roundtrip time).</p>

<h2>Overview</h2>

<p>I created 3 docker images, which build upon each other:</p>

<ul>
<li>Docker 00: base image including Ruby, Python and NodeJs</li>
<li>Docker 01: image with docker <code>ENTRYPOINT</code></li>
<li>Docker 02: image optimized for octopress usage</li>
</ul>


<p>Here is the folder structure:</p>

<p>```sh
├── 00_ruby_base
│   ├── build-image.sh
│   └── Dockerfile
├── 01_user
│   ├── build-image.sh
│   ├── Dockerfile
│   └── entrypoint.sh
├── 02_octopress
│   ├── build-image.sh
│   ├── Dockerfile
│   ├── post-install.sh
│   └── run-container.sh
└── share</p>

<pre><code>└── octopress
</code></pre>

<p>```</p>

<p>Each image (<code>00*</code>, <code>01*</code>, <code>02*</code>) contains a <code>Dockerfile</code> and a <code>build-image.sh</code> file. Only the last image (<code>02*</code>) contains a <code>run-container.sh</code> file.</p>

<ul>
<li><code>Dockerfile</code>s contain the instructions for building a docker image.</li>
<li><code>build-image.sh</code> files invoke the <code>Dockerfile</code>.</li>
</ul>


<h2>Docker 00: base image</h2>

<p>Since I couldn&rsquo;t find a simple Ruby image of 1.9.3 at docker hub I decided to create my own.</p>

<p>Knowing my use-case (Octopress), I also installed Python2.7 and NodeJs for my <a href="https://hub.docker.com/r/draptik/ruby1.9.3-python2.7-nodejs/">base docker image</a>. This image is the only one that takes quite some time to build.</p>

<h3>Dockerfile</h3>

<p>```sh Dockerfile
FROM debian:jessie</p>

<h1>Get the dependencies for Octopress page generation</h1>

<h1>#</h1>

<h2>Notes:</h2>

<h1>#</h1>

<h2>&ndash; Python 2.7 is required for using pygments gem.</h2>

<h2>&ndash; NodeJs is required for execjs Gem</h2>

<h1>#</h1>

<p>RUN apt-get update &amp;&amp; \</p>

<pre><code>apt-get --no-install-recommends -y install \
autoconf \
bison \
build-essential \
libssl-dev \
libyaml-dev \
locales \
libreadline6-dev \
zlib1g-dev \
libncurses5-dev \
libffi-dev \
libgdbm3 \
libgdbm-dev \
nodejs \
python2.7 \
wget \
ca-certificates \
curl &amp;&amp; \
apt-get clean &amp;&amp; \
rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*
</code></pre>

<h1>Set LOCALE to UTF8</h1>

<p>RUN echo &ldquo;en_US.UTF-8 UTF-8&rdquo; > /etc/locale.gen &amp;&amp; \</p>

<pre><code>locale-gen en_US.UTF-8 &amp;&amp; \
dpkg-reconfigure --frontend=noninteractive locales &amp;&amp; \
/usr/sbin/update-locale LANG=en_US.UTF-8
</code></pre>

<p>ENV LANG en_US.UTF-8
ENV LC_ALL en_US.UTF-8</p>

<h1>Install ruby (adopted from <a href="https://hub.docker.com/r/liaisonintl/ruby-1.9.3/~/dockerfile/">https://hub.docker.com/r/liaisonintl/ruby-1.9.3/~/dockerfile/</a>)</h1>

<p>ENV RUBY_MAJOR=1.9 \</p>

<pre><code>RUBY_VERSION=1.9.3-p551 \
RUBY_DOWNLOAD_SHA256=bb5be55cd1f49c95bb05b6f587701376b53d310eb1bb7c76fbd445a1c75b51e8 \
RUBYGEMS_VERSION=2.6.6 \
PATH=/usr/local/bundle/bin:$PATH
</code></pre>

<p>RUN set -ex &amp;&amp; \</p>

<pre><code>curl -SL -o ruby.tar.gz "http://cache.ruby-lang.org/pub/ruby/$RUBY_MAJOR/ruby-$RUBY_VERSION.tar.gz" &amp;&amp; \
echo "$RUBY_DOWNLOAD_SHA256 ruby.tar.gz" | sha256sum -c - &amp;&amp; \
mkdir -p /usr/src/ruby &amp;&amp; \
tar -xzf ruby.tar.gz -C /usr/src/ruby --strip-components=1 &amp;&amp; \
rm -f ruby.tar.gz &amp;&amp; \
cd /usr/src/ruby &amp;&amp; \
autoconf &amp;&amp; \
./configure --disable-install-doc --sysconfdir=/etc/ &amp;&amp; \
make &amp;&amp; \
make install &amp;&amp; \
gem update --system $RUBYGEMS_VERSION &amp;&amp; \
rm -rf /usr/src/ruby
</code></pre>

<h1>Create soft link for python</h1>

<p>RUN ln -s /usr/bin/python2.7 /usr/bin/python
```</p>

<p>Here is a short description of what happens in this <code>Dockerfile</code>:</p>

<p><code>sh
RUN apt-get ...
</code>
&hellip;retrieves required packages from the debian package repository.</p>

<p><code>sh
RUN echo "en_US.UTF-8 UTF-8" &gt; /etc/locale.gen ...
</code>
&hellip;ensures the default system language uses UTF8 (required by some packages).</p>

<p><code>sh
RUN set -ex &amp;&amp; curl... &amp;&amp; make ...
</code>
&hellip;downloads, compiles and installs Ruby from scratch (this step takes some time!).</p>

<p><code>sh
RUN ln -s /usr/bin/python2.7 /usr/bin/python
</code>
&hellip;creates a soft link to Python2.7.</p>

<h3>Docker build</h3>

<p>To execute the previous <code>Dockerfile</code>, run <code>./build-image.sh</code>.</p>

<p>```sh build-image.sh</p>

<h1>!/bin/bash</h1>

<p>docker build -t draptik/ruby1.9.3-python2.7-nodejs:0.1 .
```</p>

<p>Make the file executable (<code>chmod 744 build-image.sh</code>).</p>

<p>Ensure to replace <code>draptik</code> with some other string (f.ex. your name, initials or company) to build your own image. F.ex. <code>docker build -t homersimpson/ruby1.9.3-python2.7-nodejs:0.1 .</code></p>

<p><strong>Since this image is going to be the base image for the next step, ensure to always use the same name (f.ex. <code>homersimpson</code>)</strong>.</p>

<p>You can verify that the docker build step worked as expected by listing all docker images using <code>docker images</code>. The output should be similar to:</p>

<p><code>sh
$ docker images
REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE
homersimpson/ruby1.9.3-python2.7-nodejs:0.1   0.1                 641ca1a59e87        8 days ago          486 MB
debian              jessie              e5599115b6a6        4 weeks ago         123 MB
</code></p>

<h2>Docker 01: user</h2>

<p>Here is where things start getting difficult. Sharing a folder from the host system with docker. And keeping permissions/users in sync&hellip;</p>

<h3>Some things to know about sharing a volume in docker</h3>

<p>Sharing data between host and docker container is normally accomplished by <code>docker run -v host-location/folder:container-location/folder</code>.</p>

<p>Be aware, though:</p>

<ul>
<li>The volume will be owned by the container</li>
<li>The container&rsquo;s default user is root (UID/GID 1)!</li>
<li>The container will change the UID/GID on the host system!</li>
</ul>


<h3>My workaround</h3>

<p>I found this <a href="https://denibertovic.com/posts/handling-permissions-with-docker-volumes/">post by Deni Bertovic</a>. In short, the post proposes to use docker&rsquo;s <code>ENTRYPOINT</code> to pipe all <code>RUN</code> commands through the <code>ENTRYPOINT</code>. Which in turn is a bash script (<code>entrypoint.sh</code>, see below), creating a new user, and executing all docker commands as user. This is where I start walking on very thin ice&hellip; Nevertheless, I created another <a href="https://hub.docker.com/r/draptik/ruby1.9.3-python2.7-nodejs-user/">docker image</a> based on the base image from the previous step.</p>

<h3>Dockerfile</h3>

<p>Make sure to replace <code>draptik</code> in the <code>FROM</code> string&hellip;</p>

<p>```sh Dockerfile
FROM draptik/ruby1.9.3-python2.7-nodejs:0.1</p>

<h1>For details see <a href="https://denibertovic.com/posts/handling-permissions-with-docker-volumes/">https://denibertovic.com/posts/handling-permissions-with-docker-volumes/</a></h1>

<p>RUN apt-get update &amp;&amp; apt-get -y &mdash;no-install-recommends install \</p>

<pre><code>ca-certificates \
curl
</code></pre>

<p>RUN gpg &mdash;keyserver ha.pool.sks-keyservers.net &mdash;recv-keys B42F6819007F00F88E364FD4036A9C25BF357DD4
RUN curl -o /usr/local/bin/gosu -SL &ldquo;<a href="https://github.com/tianon/gosu/releases/download/1.10/gosu-$">https://github.com/tianon/gosu/releases/download/1.10/gosu-$</a>(dpkg &mdash;print-architecture)&rdquo; \</p>

<pre><code>&amp;&amp; curl -o /usr/local/bin/gosu.asc -SL "https://github.com/tianon/gosu/releases/download/1.10/gosu-$(dpkg --print-architecture).asc" \
&amp;&amp; gpg --verify /usr/local/bin/gosu.asc \
&amp;&amp; rm /usr/local/bin/gosu.asc \
&amp;&amp; chmod +x /usr/local/bin/gosu
</code></pre>

<p>COPY entrypoint.sh /usr/local/bin/entrypoint.sh</p>

<p>ENTRYPOINT [&ldquo;/usr/local/bin/entrypoint.sh&rdquo;]
```</p>

<p>For further details about the above <code>Dockerfile</code> refer to aforementioned <a href="https://denibertovic.com/posts/handling-permissions-with-docker-volumes/">post by Deni</a>.</p>

<p>The <code>entrypoint.sh</code> file should be located beside the <code>Dockerfile</code>:</p>

<p>```sh entrypoint.sh</p>

<h1>!/bin/bash</h1>

<h1>Add local user</h1>

<h1>Either use the LOCAL_USER_ID if passed in at runtime or</h1>

<h1>fallback</h1>

<p>USER_ID=${LOCAL_USER_ID:-9001}</p>

<p>echo &ldquo;Starting with UID : $USER_ID&rdquo;
useradd &mdash;shell /bin/bash -u $USER_ID -o -c &ldquo;&rdquo; -m user
export HOME=/home/user</p>

<p>exec /usr/local/bin/gosu user &ldquo;$@&rdquo;
```</p>

<h3>Docker build</h3>

<p>&hellip;and the corresponding <code>docker build</code> command (again, wrapped in a file):</p>

<p>```sh build-image.sh</p>

<h1>!/bin/bash</h1>

<p>docker build -t draptik/ruby1.9.3-python2.7-nodejs-user:0.1 .
```</p>

<p>&hellip;again, make sure to replace <code>draptik</code>&hellip;</p>

<h2>Docker 02: octopress</h2>

<p>Because, in addition to mounting the content of my blog, I also mount the blog-engine itself (using <code>docker run -v &lt;orig-location&gt;:&lt;container-location&gt;</code>)
I also have to execute an initial script within the mounted folder to setup the blog-engine. To prepare the environment for this script I create a customized <code>~/.gemrc</code> and <code>~/.bashrc</code> file in the <code>Dockerfile</code>.
For this purpose I mount another file from the <code>docker run</code> script (<code>post-install.sh</code>), which must be executed from within the container.</p>

<h3>Dockerfile</h3>

<p>(Make sure to replace <code>draptik</code> in the <code>FROM</code> string&hellip;)</p>

<p>```sh Dockerfile
FROM draptik/ruby1.9.3-python2.7-nodejs-user:0.1</p>

<h1>I am not really sure why this is needed, because we have an ENTRYPOINT in the parent image.</h1>

<p>RUN useradd -ms /bin/bash user</p>

<h1>Setup ruby/bundler to work with non-admin user</h1>

<p>RUN echo &ldquo;gem: &mdash;user-install&rdquo; > /home/user/.gemrc &amp;&amp; chown user:user /home/user/.gemrc
RUN echo &ldquo;PATH=\&rdquo;/home/user/.gem/ruby/1.9.1/bin:$PATH\&ldquo;&rdquo; >> /home/user/.bashrc &amp;&amp; chown user:user /home/user/.bashrc</p>

<p>WORKDIR /octopress
```</p>

<p>You might be wondering why I am explicitly creating a new user (<code>RUN useradd -ms /bin/bash user</code>). Valid question. In the next 2 lines I write some config values to files which are located in the <code>/home/user/</code> folder. I was not able to do this without first explicitly creating the user. Probably not best practice, but it works. I would be very grateful for feedback on this issue.</p>

<h3>Docker build</h3>

<p>(&hellip;again, make sure to replace <code>draptik</code>&hellip;)</p>

<p>```sh build-image.sh</p>

<h1>!/bin/bash</h1>

<p>docker build -t draptik/octopress:0.1 .
```</p>

<h3>Starting the final image as docker container</h3>

<p>The following script starts the docker container:</p>

<p>```sh run-container.sh</p>

<h1>!/bin/bash</h1>

<p>docker run \</p>

<pre><code>--rm \
-it \
-e LOCAL_USER_ID=`id -u $USER` \
-p 4001:4001 \
-v ${PWD}/../share/octopress:/octopress \
-v ${PWD}/post-install.sh:/home/user/post-install.sh \
draptik/octopress:0.1 \
/bin/bash
</code></pre>

<p>```</p>

<p>Some notes about the <code>docker run</code> options:</p>

<ul>
<li><code>--rm</code> ensures that the docker container is removed once exited</li>
<li><code>-it</code> runs an interactive terminal as soon as the container starts</li>
<li><code>-e LOCAL_USER...</code> sets the host user&rsquo;s ID within the docker container</li>
<li><code>-p ...</code> maps the port numbers</li>
<li><code>-v ${PWD}/../share/octopress:/octopress</code> mounts the blog volume</li>
<li><code>-v ${PWD}/post-install.sh:/home/user/post-install.sh</code> mounts the post install script</li>
</ul>


<p>Mounting volumes in docker using <code>docker-machine</code> or <code>Docker for Windows</code> on windows requires some extra path-tweaking. I intend to add these tweaks in the future&hellip;</p>

<h4>post-install</h4>

<p>Yet another step&hellip; After docker mounted the external volumes from the host, they have to be configured (including our blogging engine).</p>

<p>That is the reason for the <code>post-install.sh</code> script. It must be run from within the container!</p>

<p>IMPORTANT: Ensure to replace the git user name/email in <code>post-install.sh</code>. Otherwhise you will not be able to deploy!</p>

<p>```sh post-install.sh</p>

<h1>!/bin/bash</h1>

<p>#</p>

<h1>This script must be executed in ~ folder (not in /octopress)!</h1>

<p>gem install &mdash;no-ri &mdash;no-rdoc \</p>

<pre><code>bundler \
execjs
</code></pre>

<p>cd /octopress</p>

<h1>Important: use <code>--path...</code>!</h1>

<p>bundle install &mdash;path $HOME/.gem</p>

<p>git config &mdash;global user.name &ldquo;FirstName LastName&rdquo;
git config &mdash;global user.email &ldquo;<a href="&#x6d;&#x61;&#x69;&#108;&#116;&#x6f;&#x3a;&#x79;&#x6f;&#117;&#x72;&#64;&#x6d;&#97;&#x69;&#108;&#x2e;&#x63;&#111;&#109;">&#121;&#111;&#117;&#x72;&#64;&#109;&#97;&#105;&#108;&#46;&#x63;&#x6f;&#x6d;</a>&rdquo;
```</p>

<h2>Final usage for Octopress users</h2>

<p>All images are published to <a href="https://hub.docker.com/u/draptik/">docker hub</a>.</p>

<p>Just run <code>docker pull draptik/octopress:0.1</code>.</p>

<ul>
<li>Create a folder for your blog: <code>mkdir blog &amp;&amp; cd blog</code></li>
<li>Create a folder for the blog content: <code>mkdir share &amp;&amp; cd share</code></li>
</ul>


<p>Initially clone octopress in <code>share</code> folder:</p>

<p><code>sh
git clone -b source &lt;octopress-git-repo&gt; octopress
cd octopress
git clone -b master &lt;octopress-git-repo&gt; _deploy
</code></p>

<p>Then, run the <code>run-container.sh</code> script.</p>

<p>From within the newly created docker container, follow the steps from the post-install section above.</p>

<p>You should now be able to use Octopress from within the docker container (i.e. <code>rake new_post["test"]</code>, <code>rake generate</code>, <code>rake preview</code>, <code>rake deploy</code>, etc.) while being able to edit your posts on the host machine.</p>

<h2>Summary</h2>

<p>It helps if you have a linux background, since all docker images are linux based. Setting up a customized docker image can be a bit tedious (especially configuring user privileges and mounting host folders), but once the image works you have an automated and reproducible environment. I think this makes it worth the effort.</p>

<p>Obviously I am just starting with docker, so take my example above with a grain of salt. But maybe the example gives you a starting point for your own docker experiments.</p>

<p>As always: Thankful for feedback!</p>

<h2>Links</h2>

<p>You can find the complete source code at Github here: <a href="https://github.com/draptik/octopress-docker">https://github.com/draptik/octopress-docker</a></p>

<p>The docker images are hosted at Docker Hub: <a href="https://hub.docker.com/u/draptik/">https://hub.docker.com/u/draptik/</a></p>
]]></content>
  </entry>
  
</feed>
