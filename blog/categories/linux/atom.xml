<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: linux | draptik]]></title>
  <link href="http://draptik.github.io/blog/categories/linux/atom.xml" rel="self"/>
  <link href="http://draptik.github.io/"/>
  <updated>2018-03-18T18:26:36+00:00</updated>
  <id>http://draptik.github.io/</id>
  <author>
    <name><![CDATA[Patrick Drechsler]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[F# Test Setup for FizzBuzz]]></title>
    <link href="http://draptik.github.io/blog/2018/02/07/fsharp-test-setup-for-fizzbuzz/"/>
    <updated>2018-02-07T20:53:43+00:00</updated>
    <id>http://draptik.github.io/blog/2018/02/07/fsharp-test-setup-for-fizzbuzz</id>
    <content type="html"><![CDATA[<p>In my <a href="http://draptik.github.io/blog/2018/02/05/fsharp-setup-linux-fizzbuzz/">previous post</a> we setup a basic F# project in Linux.</p>

<p>In this post I would like to show how to setup an idiomatic F# testing environment using FsUnit.</p>

<h4>Side note for people unfamiliar with .NET</h4>

<p>Actually, it&rsquo;s not a project, but a &ldquo;solution&rdquo;. To clear things up for people not familiar with the .NET ecosystem: In .NET, the top level configuration is called a &ldquo;solution&rdquo; and resides in a <code>*.sln</code> file. A solution references &ldquo;projects&rdquo;. Each project configuration is stored in a <code>*.fsproj</code> file (F#) or a <code>*.csproj</code> file (C#). Projects can reference each other. This information is stored in the <code>*.[f|c]sproj</code> file.</p>

<p>We have 2 projects (<code>FizzBuzz</code> and <code>FizzBuzz.Tests</code>), each with a <code>*.fsproj</code> file. The <code>FizzBuzz.Tests.fsproj</code> references the <code>FizzBuzz.fsproj</code> file (see the <a href="http://draptik.github.io/blog/2018/02/05/fsharp-setup-linux-fizzbuzz/">previous post</a> for details):
<code>
.
├── FizzBuzz
│   ├── FizzBuzz.fsproj
│   ├── ...
├── FizzBuzz.Tests
│   ├── FizzBuzz.Tests.fsproj
│   ├── ...
└── fsharp-kata-fizzbuzz.sln
</code></p>

<h3>Current state</h3>

<p>This is the current state of our test:
<code>`fsharp
[&lt;Fact&gt;]
let</code>Array with Number 1 returns &lsquo;one&rsquo;`` () =</p>

<pre><code>let result = FizzBuzz.Generate [1]
Assert.Equal(result, "one")
</code></pre>

<p>```</p>

<ul>
<li><code>[&lt;Fact&gt;]</code>: this is F#&rsquo;s annotation style. The same as C# <code>[Fact]</code> or Java <code>@Fact</code></li>
<li><code>Array with Number 1 returns 'one'</code>: Method name in double back-ticks improves readability, especially in unit tests. No CamelCasing or snake_casing needed. It&rsquo;s an F# language feature.</li>
<li><code>Assert.Equal(...)</code>: This is probably familiar to everyone who has ever written a unit test. Every assertion library has a different signature: Is it <code>Equal(expected, actual)</code> or <code>Equal(actual, expected)</code>? I hate this! Thankfully there are alternative assertion libraries. Example: In C# you can write <code>actual.Should().Be(expected)</code> (using <a href="http://fluentassertions.com/"><code>FluentAssertions</code></a>). The same is true for F#.</li>
</ul>


<h3>FsUnit: Idiomatic assertions</h3>

<p>What does &ldquo;idiomatic&rdquo; mean? For programming languages, it means: Writing code as most people, who are used to the language, would write the code (how a &ldquo;native&rdquo; would express an idea, a concept, an algorithm, etc). Simple example: In Java and JS, the first character of a method name should be lower case. In C#, the first character should be upper case (yes, even if the method is private!). The code will still compile if you don&rsquo;t comply to these conventions, but it&rsquo;s not &ldquo;idiomatic&rdquo;. Same goes for &ldquo;For Loops&rdquo; vs using a &ldquo;Map&rdquo; functions: In some languages one concept is preferred over the other.</p>

<p><code>FsUnit</code> brings <strong>pipes</strong> to F# unit tests. Pipes are used extensively in F# and should be familiar to most linux shell users: Bash uses the <code>|</code> symbol as operator to redirect the output of one expression to the input of another expression. In F# the pipe operator is <code>|&gt;</code>. The concept might seem similar to using &ldquo;Method Chaining&rdquo; in C# (it&rsquo;s not, but close enough in this context).</p>

<p>Example:
```fsharp
// instead of
Assert.Equal(1 + 1, 2)</p>

<p>// idiomatic F# (using pipe) with FsUnit:
1 + 1 |> should equal 2
```</p>

<h4>Installing FsUnit</h4>

<p><code>sh
cd FizzBuzz.Tests
dotnet add package FsUnit.Xunit
</code></p>

<p>File <code>FizzBuzz.Tests/FizzBuzz.Tests.fsproj</code> should now look like this (plus/minus some version numbers):
```xml
<Project Sdk="Microsoft.NET.Sdk"></p>

<p>  <PropertyGroup></p>

<pre><code>&lt;TargetFramework&gt;netcoreapp2.0&lt;/TargetFramework&gt;

&lt;IsPackable&gt;false&lt;/IsPackable&gt;
</code></pre>

<p>  </PropertyGroup></p>

<p>  <ItemGroup></p>

<pre><code>&lt;Compile Include="Tests.fs" /&gt;
&lt;Compile Include="Program.fs" /&gt;
</code></pre>

<p>  </ItemGroup></p>

<p>  <ItemGroup></p>

<pre><code>&lt;PackageReference Include="FsUnit.Xunit" Version="3.0.0" /&gt;
&lt;PackageReference Include="Microsoft.NET.Test.Sdk" Version="15.5.0" /&gt;
&lt;PackageReference Include="xunit" Version="2.3.1" /&gt;
&lt;PackageReference Include="xunit.runner.visualstudio" Version="2.3.1" /&gt;
&lt;DotNetCliToolReference Include="dotnet-xunit" Version="2.3.1" /&gt;
</code></pre>

<p>  </ItemGroup></p>

<p>  <ItemGroup></p>

<pre><code>&lt;ProjectReference Include="..\FizzBuzz\FizzBuzz.fsproj" /&gt;
</code></pre>

<p>  </ItemGroup></p>

<p></Project>
```</p>

<p>Note the line <code>&lt;PackageReference Include="FsUnit.Xunit" Version="3.0.0" /&gt;</code> (your version number might differ).</p>

<h4>Using FsUnit</h4>

<p>Modify the test file <code>FizzBuzz.Tests/Tests.fs</code> to look like this:
```fsharp
module Tests</p>

<p>open System
open FsUnit.Xunit // &lt;&mdash; add FsUnit.Xunit
open Xunit
open FizzBuzz</p>

<p>[<Fact>]
let <code>Array with Number 1 returns 'one'</code> () =</p>

<pre><code>FizzBuzz.Generate [1] 
|&gt; should equal "one" // using "|&gt;" and "should" syntax
</code></pre>

<p>```</p>

<p>Running the unit tests within the test folder:</p>

<p>```sh
dotnet test
Build started, please wait&hellip;
Build completed.</p>

<p>Test run for /home/patrick/projects/fsharp-blog-fizzbuzz/fsharp-kata-fizzbuzz/FizzBuzz.Tests/bin/Debug/netcoreapp2.0/FizzBuzz.Tests.dll(.NETCoreApp,Version=v2.0)
Microsoft &reg; Test Execution Command Line Tool Version 15.5.0
Copyright &copy; Microsoft Corporation.  All rights reserved.</p>

<p>Starting test execution, please wait&hellip;
[xUnit.net 00:00:00.7436128]   Discovering: FizzBuzz.Tests
[xUnit.net 00:00:00.8627111]   Discovered:  FizzBuzz.Tests
[xUnit.net 00:00:00.8695487]   Starting:    FizzBuzz.Tests
[xUnit.net 00:00:01.1888259]   Finished:    FizzBuzz.Tests</p>

<p>Total tests: 1. Passed: 1. Failed: 0. Skipped: 0.
Test Run Successful.
Test execution time: 2.4787 Seconds
```</p>

<h3>Summary</h3>

<p>We can now write unit tests in an F# way (&ldquo;idiomatic&rdquo;) by using the library <code>FsUnit</code>.</p>

<p>Have fun with F# and linux!</p>

<p>Get the source code <a href="https://github.com/draptik/blog-fsharp-fizzbuzz-setup">here</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[F# Setup Linux: FizzBuzz]]></title>
    <link href="http://draptik.github.io/blog/2018/02/05/fsharp-setup-linux-fizzbuzz/"/>
    <updated>2018-02-05T22:31:04+00:00</updated>
    <id>http://draptik.github.io/blog/2018/02/05/fsharp-setup-linux-fizzbuzz</id>
    <content type="html"><![CDATA[<p>One of the first things I always struggle with when learning new languages is the environment. Here is a simple setup for playing with F# and Linux.</p>

<h2>Prerequisite: .NET Core with Linux</h2>

<p>I won&rsquo;t go into setting up .NET Core for linux. This should be straightforward either by following <a href="https://docs.microsoft.com/en-us/dotnet/core/linux-prerequisites?tabs=netcore2x">Microsoft instructions</a> or, in my case, the <a href="https://wiki.archlinux.org/index.php/.NET_Core">Arch Linux homepage</a>. <code>dotnet --info</code> should return something similar to:</p>

<p>```
.NET Command Line Tools (2.1.3)</p>

<p>Product Information:
 Version:            2.1.3
 Commit SHA-1 hash:  a0ca411ca5</p>

<p>Runtime Environment:
 OS Name:     arch
 OS Version:
 OS Platform: Linux
 RID:         linux-x64
 Base Path:   /opt/dotnet/sdk/2.1.3/</p>

<p>Microsoft .NET Core Shared Framework Host</p>

<p>  Version  : 2.0.5
  Build    : 17373eb129b3b05aa18ece963f8795d65ef8ea54
```</p>

<h2>Creating a Kata</h2>

<p>Let&rsquo;s create a project for the FizzBuzz Kata.</p>

<p><code>
mkdir fsharp-kata-fizzbuzz
cd fsharp-kata-fizzbuzz
dotnet new classlib -lang f# -o FizzBuzz
dotnet new xunit -lang f# -o FizzBuzz.Tests
cd FizzBuzz.Tests
dotnet add reference ../FizzBuzz/FizzBuzz.fsproj
cd ..
dotnet new sln
dotnet sln add FizzBuzz/FizzBuzz.fsproj
dotnet sln add FizzBuzz.Tests/FizzBuzz.Tests.fsproj
</code></p>

<p>(I really love this new &ldquo;CLI first&rdquo; approach! It makes live so much easier for DevOps)</p>

<p>This is our project structure after templating:</p>

<p><code>
tree . -L 4
.
├── FizzBuzz
│   ├── bin
│   │   └── Debug
│   │       └── netstandard2.0
│   ├── FizzBuzz.fsproj
│   ├── Library.fs
│   └── obj
│       ├── Debug
│       │   └── netstandard2.0
│       ├── FizzBuzz.fsproj.nuget.cache
│       ├── FizzBuzz.fsproj.nuget.g.props
│       ├── FizzBuzz.fsproj.nuget.g.targets
│       └── project.assets.json
├── FizzBuzz.Tests
│   ├── bin
│   │   └── Debug
│   │       └── netcoreapp2.0
│   ├── FizzBuzz.Tests.fsproj
│   ├── obj
│   │   ├── Debug
│   │   │   └── netcoreapp2.0
│   │   ├── FizzBuzz.Tests.fsproj.nuget.cache
│   │   ├── FizzBuzz.Tests.fsproj.nuget.g.props
│   │   ├── FizzBuzz.Tests.fsproj.nuget.g.targets
│   │   └── project.assets.json
│   ├── Program.fs
│   └── Tests.fs
└── fsharp-kata-fizzbuzz.sln
</code></p>

<p>The 3 project files (top &ndash; down)&hellip;</p>

<p><code>fsharp-kata-fizzbuzz.sln</code> (nothing new here)
```
Microsoft Visual Studio Solution File, Format Version 12.00</p>

<h1>Visual Studio 15</h1>

<p>VisualStudioVersion = 15.0.26124.0
MinimumVisualStudioVersion = 15.0.26124.0
Project(&ldquo;{F2A71F9B-5D33-465A-A702-920D77279786}&rdquo;) = &ldquo;FizzBuzz&rdquo;, &ldquo;FizzBuzz\FizzBuzz.fsproj&rdquo;, &ldquo;{C64F3370-DE54-4D58-BDD4-33C4B02F7290}&rdquo;
EndProject
Project(&ldquo;{F2A71F9B-5D33-465A-A702-920D77279786}&rdquo;) = &ldquo;FizzBuzz.Tests&rdquo;, &ldquo;FizzBuzz.Tests\FizzBuzz.Tests.fsproj&rdquo;, &ldquo;{4AA6DACD-EA0E-4938-BB41-7B055A9A0C8C}&rdquo;
EndProject
[&hellip;]
```</p>

<p><code>FizzBuzz/FizzBuzz.fsproj</code> (not relevant here, but keep in mind that fsharp files have to be in the correct order):
```xml
<Project Sdk="Microsoft.NET.Sdk"></p>

<p>  <PropertyGroup></p>

<pre><code>&lt;TargetFramework&gt;netstandard2.0&lt;/TargetFramework&gt;
</code></pre>

<p>  </PropertyGroup></p>

<p>  <ItemGroup></p>

<pre><code>&lt;Compile Include="Library.fs" /&gt;
</code></pre>

<p>  </ItemGroup></p>

<p></Project>
```</p>

<p><code>FizzBuzz.Tests/FizzBuzz.Tests.fsproj</code>:
```xml
<Project Sdk="Microsoft.NET.Sdk"></p>

<p>  <PropertyGroup></p>

<pre><code>&lt;TargetFramework&gt;netcoreapp2.0&lt;/TargetFramework&gt;

&lt;IsPackable&gt;false&lt;/IsPackable&gt;
</code></pre>

<p>  </PropertyGroup></p>

<p>  <ItemGroup></p>

<pre><code>&lt;Compile Include="Tests.fs" /&gt;
&lt;Compile Include="Program.fs" /&gt;
</code></pre>

<p>  </ItemGroup></p>

<p>  <ItemGroup></p>

<pre><code>&lt;PackageReference Include="Microsoft.NET.Test.Sdk" Version="15.5.0" /&gt;
&lt;PackageReference Include="xunit" Version="2.3.1" /&gt;
&lt;PackageReference Include="xunit.runner.visualstudio" Version="2.3.1" /&gt;
&lt;DotNetCliToolReference Include="dotnet-xunit" Version="2.3.1" /&gt;
</code></pre>

<p>  </ItemGroup></p>

<p>  <ItemGroup></p>

<pre><code>&lt;ProjectReference Include="..\FizzBuzz\FizzBuzz.fsproj" /&gt;
</code></pre>

<p>  </ItemGroup></p>

<p></Project>
```</p>

<p>Running <code>dotnet test</code> returns</p>

<p>```
$ dotnet test
Build started, please wait&hellip;
Build started, please wait&hellip;
Build completed.</p>

<p>Test run for /home/patrick/projects/fsharp-blog-fizzbuzz/fsharp-kata-fizzbuzz/FizzBuzz/bin/Debug/netstandard2.0/FizzBuzz.dll(.NETStandard,Version=v2.0)
Microsoft &reg; Test Execution Command Line Tool Version 15.5.0
Copyright &copy; Microsoft Corporation.  All rights reserved.</p>

<p>Starting test execution, please wait&hellip;
No test is available in /home/patrick/projects/fsharp-blog-fizzbuzz/fsharp-kata-fizzbuzz/FizzBuzz/bin/Debug/netstandard2.0/FizzBuzz.dll. Make sure test project has a nuget reference of package &ldquo;Microsoft.NET.Test.Sdk&rdquo; and framework version settings are appropriate and try again.</p>

<p>Test Run Aborted.
Build completed.</p>

<p>Test run for /home/patrick/projects/fsharp-blog-fizzbuzz/fsharp-kata-fizzbuzz/FizzBuzz.Tests/bin/Debug/netcoreapp2.0/FizzBuzz.Tests.dll(.NETCoreApp,Version=v2.0)
Microsoft &reg; Test Execution Command Line Tool Version 15.5.0
Copyright &copy; Microsoft Corporation.  All rights reserved.</p>

<p>Starting test execution, please wait&hellip;
[xUnit.net 00:00:00.9263576]   Discovering: FizzBuzz.Tests
[xUnit.net 00:00:01.0646319]   Discovered:  FizzBuzz.Tests
[xUnit.net 00:00:01.0733357]   Starting:    FizzBuzz.Tests
[xUnit.net 00:00:01.2961789]   Finished:    FizzBuzz.Tests</p>

<p>Total tests: 1. Passed: 1. Failed: 0. Skipped: 0.
Test Run Successful.
Test execution time: 2.5956 Seconds
```</p>

<p>Ok, <code>dotnet test</code> does not recognize which project actually contains tests. But it runs all tests!</p>

<p>Let&rsquo;s add a test.</p>

<p>The file <code>FizzBuzz.Tests/Tests.fs</code> (generated by <code>dotnet new xunit...</code>) looks like this:
```fsharp
module Tests</p>

<p>open System
open Xunit</p>

<p>[<Fact>]
let <code>My test</code> () =</p>

<pre><code>Assert.True(true)
</code></pre>

<p>```</p>

<p>TDD approach: We will create a failing test first, then implement something.</p>

<p>Replace the content of <code>FizzBuzz.Tests/Tests.fs</code> with</p>

<p>```fsharp
module Tests</p>

<p>open System
open Xunit
open FizzBuzz</p>

<p>[<Fact>]
let <code>Array with Number 1 returns 'one'</code> () =</p>

<pre><code>let result = FizzBuzz.Generate [1]
Assert.Equal(result, "one")
</code></pre>

<p>```</p>

<p>We verify 2 aspects:</p>

<ul>
<li>we are invoking another library (<code>FizzBuzz</code>) from our test class</li>
<li>we are learning to use the test library</li>
</ul>


<p>This does not compile. Let&rsquo;s implement the simplest solution:</p>

<p>Replace <code>FizzBuzz/Library.fs</code> with
```
module FizzBuzz</p>

<p>let Generate i = &ldquo;one&rdquo;
```</p>

<p>Running <code>dotnet test</code> should now confirm 1 passing test.</p>

<p>Have fun with F# on Linux!</p>

<p>Get the source code <a href="https://github.com/draptik/blog-fsharp-fizzbuzz-setup">here</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Docker and Octopress]]></title>
    <link href="http://draptik.github.io/blog/2017/04/04/docker-and-octopress/"/>
    <updated>2017-04-04T18:41:51+00:00</updated>
    <id>http://draptik.github.io/blog/2017/04/04/docker-and-octopress</id>
    <content type="html"><![CDATA[<p>This post describes how I created my first customized docker image(s).</p>

<p>I have been watching the <a href="https://www.docker.com/">docker</a> space for a while and finally found a private use-case: This blog uses <a href="http://octopress.org/">Octopress</a>, which is a ruby-based convenience-wrapper around Jekyll.
<a href="https://jekyllrb.com/">Jekyll</a> is a static web-site generator provided by <a href="https://github.com/jekyll/jekyll">GitHub</a>.
Octopress requires some old libs: Ruby 1.9.3, Python 2.7, and nodejs.</p>

<p>So, to use Octopress on any machine, I have to either:</p>

<ul>
<li>configure the machine to use specific versions of Ruby, Python and NodeJs. Works.

<ul>
<li>Drawback: Other projects using different versions of Ruby, Python, NodeJs won&rsquo;t work out of the box.</li>
</ul>
</li>
<li>use version managers for Ruby, Python and NodeJs (f.ex. <a href="https://rvm.io/"><code>rvm</code></a>, <a href="http://fgimian.github.io/blog/2012/12/08/setting-up-virtual-development-environments-for-python/"><code>virtualenv</code></a>, <a href="https://github.com/creationix/nvm"><code>nvm</code></a>). Works.

<ul>
<li>Drawback: Tedious setup which differs between OSes.</li>
</ul>
</li>
<li>use a virtual machine. Works.

<ul>
<li>Drawback: Not easily portable due to size of virtual machine image.</li>
</ul>
</li>
<li>Or, I could use docker.</li>
</ul>


<p>I decided to give docker a spin.</p>

<p><strong>My primary goal was to be able to blog from any (linux) machine running docker.</strong></p>

<p>From a birds-eye view my goal is to:</p>

<ul>
<li>install a docker image on any machine</li>
<li>and run a docker container with my blog mounted as shared folder (so I can edit the content on the host system, but compilation, preview and publishing is accomplished from within the docker container)</li>
</ul>


<p><strong>My secondary goal was to get my hands dirty with docker :&ndash;)</strong></p>

<p>Obviously docker also has potential usage for other development setups (i.e. testing application code in local docker container before pushing to CI to reduce roundtrip time).</p>

<h2>Overview</h2>

<p>I created 3 docker images, which build upon each other:</p>

<ul>
<li>Docker 00: base image including Ruby, Python and NodeJs</li>
<li>Docker 01: image with docker <code>ENTRYPOINT</code></li>
<li>Docker 02: image optimized for octopress usage</li>
</ul>


<p>Here is the folder structure:</p>

<p>```sh
├── 00_ruby_base
│   ├── build-image.sh
│   └── Dockerfile
├── 01_user
│   ├── build-image.sh
│   ├── Dockerfile
│   └── entrypoint.sh
├── 02_octopress
│   ├── build-image.sh
│   ├── Dockerfile
│   ├── post-install.sh
│   └── run-container.sh
└── share</p>

<pre><code>└── octopress
</code></pre>

<p>```</p>

<p>Each image (<code>00*</code>, <code>01*</code>, <code>02*</code>) contains a <code>Dockerfile</code> and a <code>build-image.sh</code> file. Only the last image (<code>02*</code>) contains a <code>run-container.sh</code> file.</p>

<ul>
<li><code>Dockerfile</code>s contain the instructions for building a docker image.</li>
<li><code>build-image.sh</code> files invoke the <code>Dockerfile</code>.</li>
</ul>


<h2>Docker 00: base image</h2>

<p>Since I couldn&rsquo;t find a simple Ruby image of 1.9.3 at docker hub I decided to create my own.</p>

<p>Knowing my use-case (Octopress), I also installed Python2.7 and NodeJs for my <a href="https://hub.docker.com/r/draptik/ruby1.9.3-python2.7-nodejs/">base docker image</a>. This image is the only one that takes quite some time to build.</p>

<h3>Dockerfile</h3>

<p>```sh Dockerfile
FROM debian:jessie</p>

<h1>Get the dependencies for Octopress page generation</h1>

<h1>#</h1>

<h2>Notes:</h2>

<h1>#</h1>

<h2>&ndash; Python 2.7 is required for using pygments gem.</h2>

<h2>&ndash; NodeJs is required for execjs Gem</h2>

<h1>#</h1>

<p>RUN apt-get update &amp;&amp; \</p>

<pre><code>apt-get --no-install-recommends -y install \
autoconf \
bison \
build-essential \
libssl-dev \
libyaml-dev \
locales \
libreadline6-dev \
zlib1g-dev \
libncurses5-dev \
libffi-dev \
libgdbm3 \
libgdbm-dev \
nodejs \
python2.7 \
wget \
ca-certificates \
curl &amp;&amp; \
apt-get clean &amp;&amp; \
rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*
</code></pre>

<h1>Set LOCALE to UTF8</h1>

<p>RUN echo &ldquo;en_US.UTF-8 UTF-8&rdquo; > /etc/locale.gen &amp;&amp; \</p>

<pre><code>locale-gen en_US.UTF-8 &amp;&amp; \
dpkg-reconfigure --frontend=noninteractive locales &amp;&amp; \
/usr/sbin/update-locale LANG=en_US.UTF-8
</code></pre>

<p>ENV LANG en_US.UTF-8
ENV LC_ALL en_US.UTF-8</p>

<h1>Install ruby (adopted from <a href="https://hub.docker.com/r/liaisonintl/ruby-1.9.3/~/dockerfile/">https://hub.docker.com/r/liaisonintl/ruby-1.9.3/~/dockerfile/</a>)</h1>

<p>ENV RUBY_MAJOR=1.9 \</p>

<pre><code>RUBY_VERSION=1.9.3-p551 \
RUBY_DOWNLOAD_SHA256=bb5be55cd1f49c95bb05b6f587701376b53d310eb1bb7c76fbd445a1c75b51e8 \
RUBYGEMS_VERSION=2.6.6 \
PATH=/usr/local/bundle/bin:$PATH
</code></pre>

<p>RUN set -ex &amp;&amp; \</p>

<pre><code>curl -SL -o ruby.tar.gz "http://cache.ruby-lang.org/pub/ruby/$RUBY_MAJOR/ruby-$RUBY_VERSION.tar.gz" &amp;&amp; \
echo "$RUBY_DOWNLOAD_SHA256 ruby.tar.gz" | sha256sum -c - &amp;&amp; \
mkdir -p /usr/src/ruby &amp;&amp; \
tar -xzf ruby.tar.gz -C /usr/src/ruby --strip-components=1 &amp;&amp; \
rm -f ruby.tar.gz &amp;&amp; \
cd /usr/src/ruby &amp;&amp; \
autoconf &amp;&amp; \
./configure --disable-install-doc --sysconfdir=/etc/ &amp;&amp; \
make &amp;&amp; \
make install &amp;&amp; \
gem update --system $RUBYGEMS_VERSION &amp;&amp; \
rm -rf /usr/src/ruby
</code></pre>

<h1>Create soft link for python</h1>

<p>RUN ln -s /usr/bin/python2.7 /usr/bin/python
```</p>

<p>Here is a short description of what happens in this <code>Dockerfile</code>:</p>

<p><code>sh
RUN apt-get ...
</code>
&hellip;retrieves required packages from the debian package repository.</p>

<p><code>sh
RUN echo "en_US.UTF-8 UTF-8" &gt; /etc/locale.gen ...
</code>
&hellip;ensures the default system language uses UTF8 (required by some packages).</p>

<p><code>sh
RUN set -ex &amp;&amp; curl... &amp;&amp; make ...
</code>
&hellip;downloads, compiles and installs Ruby from scratch (this step takes some time!).</p>

<p><code>sh
RUN ln -s /usr/bin/python2.7 /usr/bin/python
</code>
&hellip;creates a soft link to Python2.7.</p>

<h3>Docker build</h3>

<p>To execute the previous <code>Dockerfile</code>, run <code>./build-image.sh</code>.</p>

<p>```sh build-image.sh</p>

<h1>!/bin/bash</h1>

<p>docker build -t draptik/ruby1.9.3-python2.7-nodejs:0.1 .
```</p>

<p>Make the file executable (<code>chmod 744 build-image.sh</code>).</p>

<p>Ensure to replace <code>draptik</code> with some other string (f.ex. your name, initials or company) to build your own image. F.ex. <code>docker build -t homersimpson/ruby1.9.3-python2.7-nodejs:0.1 .</code></p>

<p><strong>Since this image is going to be the base image for the next step, ensure to always use the same name (f.ex. <code>homersimpson</code>)</strong>.</p>

<p>You can verify that the docker build step worked as expected by listing all docker images using <code>docker images</code>. The output should be similar to:</p>

<p><code>sh
$ docker images
REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE
homersimpson/ruby1.9.3-python2.7-nodejs:0.1   0.1                 641ca1a59e87        8 days ago          486 MB
debian              jessie              e5599115b6a6        4 weeks ago         123 MB
</code></p>

<h2>Docker 01: user</h2>

<p>Here is where things start getting difficult. Sharing a folder from the host system with docker. And keeping permissions/users in sync&hellip;</p>

<h3>Some things to know about sharing a volume in docker</h3>

<p>Sharing data between host and docker container is normally accomplished by <code>docker run -v host-location/folder:container-location/folder</code>.</p>

<p>Be aware, though:</p>

<ul>
<li>The volume will be owned by the container</li>
<li>The container&rsquo;s default user is root (UID/GID 1)!</li>
<li>The container will change the UID/GID on the host system!</li>
</ul>


<h3>My workaround</h3>

<p>I found this <a href="https://denibertovic.com/posts/handling-permissions-with-docker-volumes/">post by Deni Bertovic</a>. In short, the post proposes to use docker&rsquo;s <code>ENTRYPOINT</code> to pipe all <code>RUN</code> commands through the <code>ENTRYPOINT</code>. Which in turn is a bash script (<code>entrypoint.sh</code>, see below), creating a new user, and executing all docker commands as user. This is where I start walking on very thin ice&hellip; Nevertheless, I created another <a href="https://hub.docker.com/r/draptik/ruby1.9.3-python2.7-nodejs-user/">docker image</a> based on the base image from the previous step.</p>

<h3>Dockerfile</h3>

<p>Make sure to replace <code>draptik</code> in the <code>FROM</code> string&hellip;</p>

<p>```sh Dockerfile
FROM draptik/ruby1.9.3-python2.7-nodejs:0.1</p>

<h1>For details see <a href="https://denibertovic.com/posts/handling-permissions-with-docker-volumes/">https://denibertovic.com/posts/handling-permissions-with-docker-volumes/</a></h1>

<p>RUN apt-get update &amp;&amp; apt-get -y &mdash;no-install-recommends install \</p>

<pre><code>ca-certificates \
curl
</code></pre>

<p>RUN gpg &mdash;keyserver ha.pool.sks-keyservers.net &mdash;recv-keys B42F6819007F00F88E364FD4036A9C25BF357DD4
RUN curl -o /usr/local/bin/gosu -SL &ldquo;<a href="https://github.com/tianon/gosu/releases/download/1.10/gosu-$">https://github.com/tianon/gosu/releases/download/1.10/gosu-$</a>(dpkg &mdash;print-architecture)&rdquo; \</p>

<pre><code>&amp;&amp; curl -o /usr/local/bin/gosu.asc -SL "https://github.com/tianon/gosu/releases/download/1.10/gosu-$(dpkg --print-architecture).asc" \
&amp;&amp; gpg --verify /usr/local/bin/gosu.asc \
&amp;&amp; rm /usr/local/bin/gosu.asc \
&amp;&amp; chmod +x /usr/local/bin/gosu
</code></pre>

<p>COPY entrypoint.sh /usr/local/bin/entrypoint.sh</p>

<p>ENTRYPOINT [&ldquo;/usr/local/bin/entrypoint.sh&rdquo;]
```</p>

<p>For further details about the above <code>Dockerfile</code> refer to aforementioned <a href="https://denibertovic.com/posts/handling-permissions-with-docker-volumes/">post by Deni</a>.</p>

<p>The <code>entrypoint.sh</code> file should be located beside the <code>Dockerfile</code>:</p>

<p>```sh entrypoint.sh</p>

<h1>!/bin/bash</h1>

<h1>Add local user</h1>

<h1>Either use the LOCAL_USER_ID if passed in at runtime or</h1>

<h1>fallback</h1>

<p>USER_ID=${LOCAL_USER_ID:-9001}</p>

<p>echo &ldquo;Starting with UID : $USER_ID&rdquo;
useradd &mdash;shell /bin/bash -u $USER_ID -o -c &ldquo;&rdquo; -m user
export HOME=/home/user</p>

<p>exec /usr/local/bin/gosu user &ldquo;$@&rdquo;
```</p>

<h3>Docker build</h3>

<p>&hellip;and the corresponding <code>docker build</code> command (again, wrapped in a file):</p>

<p>```sh build-image.sh</p>

<h1>!/bin/bash</h1>

<p>docker build -t draptik/ruby1.9.3-python2.7-nodejs-user:0.1 .
```</p>

<p>&hellip;again, make sure to replace <code>draptik</code>&hellip;</p>

<h2>Docker 02: octopress</h2>

<p>Because, in addition to mounting the content of my blog, I also mount the blog-engine itself (using <code>docker run -v &lt;orig-location&gt;:&lt;container-location&gt;</code>)
I also have to execute an initial script within the mounted folder to setup the blog-engine. To prepare the environment for this script I create a customized <code>~/.gemrc</code> and <code>~/.bashrc</code> file in the <code>Dockerfile</code>.
For this purpose I mount another file from the <code>docker run</code> script (<code>post-install.sh</code>), which must be executed from within the container.</p>

<h3>Dockerfile</h3>

<p>(Make sure to replace <code>draptik</code> in the <code>FROM</code> string&hellip;)</p>

<p>```sh Dockerfile
FROM draptik/ruby1.9.3-python2.7-nodejs-user:0.1</p>

<h1>I am not really sure why this is needed, because we have an ENTRYPOINT in the parent image.</h1>

<p>RUN useradd -ms /bin/bash user</p>

<h1>Setup ruby/bundler to work with non-admin user</h1>

<p>RUN echo &ldquo;gem: &mdash;user-install&rdquo; > /home/user/.gemrc &amp;&amp; chown user:user /home/user/.gemrc
RUN echo &ldquo;PATH=\&rdquo;/home/user/.gem/ruby/1.9.1/bin:$PATH\&ldquo;&rdquo; >> /home/user/.bashrc &amp;&amp; chown user:user /home/user/.bashrc</p>

<p>WORKDIR /octopress
```</p>

<p>You might be wondering why I am explicitly creating a new user (<code>RUN useradd -ms /bin/bash user</code>). Valid question. In the next 2 lines I write some config values to files which are located in the <code>/home/user/</code> folder. I was not able to do this without first explicitly creating the user. Probably not best practice, but it works. I would be very grateful for feedback on this issue.</p>

<h3>Docker build</h3>

<p>(&hellip;again, make sure to replace <code>draptik</code>&hellip;)</p>

<p>```sh build-image.sh</p>

<h1>!/bin/bash</h1>

<p>docker build -t draptik/octopress:0.1 .
```</p>

<h3>Starting the final image as docker container</h3>

<p>The following script starts the docker container:</p>

<p>```sh run-container.sh</p>

<h1>!/bin/bash</h1>

<p>docker run \</p>

<pre><code>--rm \
-it \
-e LOCAL_USER_ID=`id -u $USER` \
-p 4001:4001 \
-v ${PWD}/../share/octopress:/octopress \
-v ${PWD}/post-install.sh:/home/user/post-install.sh \
draptik/octopress:0.1 \
/bin/bash
</code></pre>

<p>```</p>

<p>Some notes about the <code>docker run</code> options:</p>

<ul>
<li><code>--rm</code> ensures that the docker container is removed once exited</li>
<li><code>-it</code> runs an interactive terminal as soon as the container starts</li>
<li><code>-e LOCAL_USER...</code> sets the host user&rsquo;s ID within the docker container</li>
<li><code>-p ...</code> maps the port numbers</li>
<li><code>-v ${PWD}/../share/octopress:/octopress</code> mounts the blog volume</li>
<li><code>-v ${PWD}/post-install.sh:/home/user/post-install.sh</code> mounts the post install script</li>
</ul>


<p>Mounting volumes in docker using <code>docker-machine</code> or <code>Docker for Windows</code> on windows requires some extra path-tweaking. I intend to add these tweaks in the future&hellip;</p>

<h4>post-install</h4>

<p>Yet another step&hellip; After docker mounted the external volumes from the host, they have to be configured (including our blogging engine).</p>

<p>That is the reason for the <code>post-install.sh</code> script. It must be run from within the container!</p>

<p>IMPORTANT: Ensure to replace the git user name/email in <code>post-install.sh</code>. Otherwhise you will not be able to deploy!</p>

<p>```sh post-install.sh</p>

<h1>!/bin/bash</h1>

<p>#</p>

<h1>This script must be executed in ~ folder (not in /octopress)!</h1>

<p>gem install &mdash;no-ri &mdash;no-rdoc \</p>

<pre><code>bundler \
execjs
</code></pre>

<p>cd /octopress</p>

<h1>Important: use <code>--path...</code>!</h1>

<p>bundle install &mdash;path $HOME/.gem</p>

<p>git config &mdash;global user.name &ldquo;FirstName LastName&rdquo;
git config &mdash;global user.email &ldquo;<a href="&#x6d;&#x61;&#105;&#x6c;&#x74;&#111;&#58;&#121;&#111;&#117;&#x72;&#x40;&#109;&#97;&#x69;&#108;&#x2e;&#x63;&#x6f;&#x6d;">&#121;&#111;&#117;&#114;&#64;&#x6d;&#97;&#105;&#x6c;&#46;&#x63;&#111;&#x6d;</a>&rdquo;
```</p>

<h2>Final usage for Octopress users</h2>

<p>All images are published to <a href="https://hub.docker.com/u/draptik/">docker hub</a>.</p>

<p>Just run <code>docker pull draptik/octopress:0.1</code>.</p>

<ul>
<li>Create a folder for your blog: <code>mkdir blog &amp;&amp; cd blog</code></li>
<li>Create a folder for the blog content: <code>mkdir share &amp;&amp; cd share</code></li>
</ul>


<p>Initially clone octopress in <code>share</code> folder:</p>

<p><code>sh
git clone -b source &lt;octopress-git-repo&gt; octopress
cd octopress
git clone -b master &lt;octopress-git-repo&gt; _deploy
</code></p>

<p>Then, run the <code>run-container.sh</code> script.</p>

<p>From within the newly created docker container, follow the steps from the post-install section above.</p>

<p>You should now be able to use Octopress from within the docker container (i.e. <code>rake new_post["test"]</code>, <code>rake generate</code>, <code>rake preview</code>, <code>rake deploy</code>, etc.) while being able to edit your posts on the host machine.</p>

<h2>Summary</h2>

<p>It helps if you have a linux background, since all docker images are linux based. Setting up a customized docker image can be a bit tedious (especially configuring user privileges and mounting host folders), but once the image works you have an automated and reproducible environment. I think this makes it worth the effort.</p>

<p>Obviously I am just starting with docker, so take my example above with a grain of salt. But maybe the example gives you a starting point for your own docker experiments.</p>

<p>As always: Thankful for feedback!</p>

<h2>Links</h2>

<p>You can find the complete source code at Github here: <a href="https://github.com/draptik/octopress-docker">https://github.com/draptik/octopress-docker</a></p>

<p>The docker images are hosted at Docker Hub: <a href="https://hub.docker.com/u/draptik/">https://hub.docker.com/u/draptik/</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Bash tricks]]></title>
    <link href="http://draptik.github.io/blog/2017/01/09/bash-tricks/"/>
    <updated>2017-01-09T23:22:02+00:00</updated>
    <id>http://draptik.github.io/blog/2017/01/09/bash-tricks</id>
    <content type="html"><![CDATA[<p>Over the holidays I stumbled across 2 neat bash tricks to simplify navigation between folders:</p>

<ul>
<li><code>autocd</code></li>
<li><code>autojump</code></li>
</ul>


<p>Neither of these features is new.</p>

<h2>autocd</h2>

<p><code>autocd</code> is very simple: It&rsquo;s a built-in bash feature which prepends <code>cd</code> in case you enter a valid path.</p>

<p><code>bash
$ cd /etc
$ /etc # the same
</code></p>

<h3>Setup</h3>

<p>Add this to your <code>~/.bashrc</code>:
<code>bash
shopt -s autocd
</code></p>

<h2>autojump</h2>

<blockquote><p>A cd command that learns &ndash; easily navigate directories from the command line</p></blockquote>

<p>Directly from the source at <a href="https://github.com/wting/autojump">autojump</a>:</p>

<p>Usage:</p>

<p><code>j</code> is a convenience wrapper function around <code>autojump</code>. Any option that can be used with <code>autojump</code> can be used with <code>j</code> and vice versa.</p>

<p>Jump To A Directory That Contains <code>foo</code>:</p>

<p><code>bash
j foo
</code></p>

<p>Jump To A Child Directory:</p>

<p>Sometimes it&rsquo;s convenient to jump to a child directory (sub-directory of current directory) rather than typing out the full name.
<code>bash
jc bar
</code>
Open File Manager To Directories (instead of jumping):</p>

<p>Instead of jumping to a directory, you can open a file explorer window (Mac Finder, Windows Explorer, GNOME Nautilus, etc.) to the directory instead.
<code>bash
jo music
</code>
Opening a file manager to a child directory is also supported:
<code>bash
jco images
</code>
Using Multiple Arguments:</p>

<p>Let&rsquo;s assume the following database:
<code>bash
30   /home/user/mail/inbox
10   /home/user/work/inbox
</code>
<code>j</code> in would jump into <code>/home/user/mail/inbox</code> as the higher weighted entry. However you can pass multiple arguments to <code>autojump</code> to prefer a different entry. In the above example, <code>j w in</code> would then change directory to <code>/home/user/work/inbox</code>.</p>

<p>For more options refer to help:
<code>bash
autojump --help
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Listing environment variables (Linux)]]></title>
    <link href="http://draptik.github.io/blog/2013/07/05/listing-environment-variables-linux/"/>
    <updated>2013-07-05T23:33:00+00:00</updated>
    <id>http://draptik.github.io/blog/2013/07/05/listing-environment-variables-linux</id>
    <content type="html"><![CDATA[<p>Just a note to self: Get a list of all linux environment variables and their values using the <code>export</code> command.</p>

<p>Here is an example:</p>

<p><code>sh
pi@rpidev ~ $ export
declare -x HOME="/home/pi"
declare -x JAVA_HOME="/opt/java/jdk1.7.0_25"
declare -x LANG="en_GB.UTF-8"
declare -x LOGNAME="pi"
declare -x LS_COLORS="rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arj=01;31:*.taz=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.zip=01;31:*.z=01;31:*.Z=01;31:*.dz=01;31:*.gz=01;31:*.lz=01;31:*.xz=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.jpg=01;35:*.jpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.axv=01;35:*.anx=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.axa=00;36:*.oga=00;36:*.spx=00;36:*.xspf=00;36:"
declare -x MAIL="/var/mail/pi"
declare -x OLDPWD="/home/pi/myinstall_notes"
declare -x PATH="/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/local/games:/usr/games:/opt/java/jdk1.7.0_25/bin"
declare -x PWD="/home/pi"
declare -x SHELL="/bin/bash"
declare -x SHLVL="1"
declare -x SSH_CLIENT="192.168.179.32 39295 22"
declare -x SSH_CONNECTION="192.168.179.32 39295 192.168.179.148 22"
declare -x SSH_TTY="/dev/pts/0"
declare -x TERM="xterm"
declare -x USER="pi"
</code></p>
]]></content>
  </entry>
  
</feed>
