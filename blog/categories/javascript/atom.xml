<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: javascript | draptik]]></title>
  <link href="http://draptik.github.io/blog/categories/javascript/atom.xml" rel="self"/>
  <link href="http://draptik.github.io/"/>
  <updated>2013-10-01T17:43:15+02:00</updated>
  <id>http://draptik.github.io/</id>
  <author>
    <name><![CDATA[Patrick Drechsler]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[AngularJS and CORS]]></title>
    <link href="http://draptik.github.io/blog/2013/08/19/angularjs-and-cors/"/>
    <updated>2013-08-19T18:47:00+02:00</updated>
    <id>http://draptik.github.io/blog/2013/08/19/angularjs-and-cors</id>
    <content type="html"><![CDATA[<h2>TL;DR</h2>

<p>While splitting my <a href="https://github.com/draptik/angulardemorestful">AngularJS demo app</a> into independent back- and frontend projects (running two different servers) I stumbled across cross domain issues during development. This post describes how to implement CORS on the server and/or client side of an application.</p>

<h2>&hellip;</h2>

<p>This post describes how I split the backend and frontend of my <a href="https://github.com/draptik/angulardemorestful">AngularJS demo app</a> into separate applications.</p>

<p>Hopefully this will simplify switching the used backend technology in the future (i.e. replacing Java with .NET or Node.JS).</p>

<h2>New directory structure</h2>

<p>To begin with I created two new top level folders: <code>backend/java-backend</code> and <code>frontend</code>.
Then I moved all Java code (including Java IDE settings, pom.xml, etc.) to the new <code>java-backend</code> folder.
Since the frontend code (JS, CSS, HTML templates) was previously located in <code>src/main/webapp</code> I moved it to the new frontend folder.</p>

<p>The Java project folder <code>webapp</code> now only contains the following minimal setup:</p>

<p>``` sh
backend/java-backend/src/main/webapp
├── index.jsp
└── WEB-INF</p>

<pre><code>└── web.xml
</code></pre>

<p>```</p>

<p>The <code>frontend</code> folder now has the following (simplified) structure:</p>

<p><code>sh
frontend/
├── css
├── frontend-web-server.js
├── index.html
├── js
│   ├── app.js
│   ├── bootstrap
│   ├── controllers.js
│   ├── directives.js
│   ├── filters.js
│   ├── jquery
│   └── services.js
</code></p>

<h2>Frontend web server</h2>

<p>Not knowing anything about node.js (yet), I just copied the simple <a href="https://github.com/angular/angular-phonecat/blob/master/scripts/web-server.js">web server from Google&rsquo;s AngularJS demo application PhoneCat</a> to <code>frontend/frontend-web-server.js</code>. For this server to run you will have to install node.js on your system. The frontend server will be running on <em>port 8000</em>.</p>

<p><code>sh frontend-web-server.js
// ...
var DEFAULT_PORT = 8000; // &lt;-- frontend port
// ...
</code></p>

<p>We can start/stop the frontend web server using the scripts <code>start_frontend_server.sh</code> and <code>stop_frontend_server.sh</code>.</p>

<h2>Backend web server</h2>

<p>The backend server is Tomcat. We can start/stop the backend web server using the scripts <code>start_java_backend.sh</code> and <code>stop_java_backend.sh</code>. The backend server will be running on <em>port 8080</em>.</p>

<h2>CORS configuration</h2>

<p>Cross-origin resource sharing (<a href="http://en.wikipedia.org/wiki/Cross-origin_resource_sharing">CORS</a>) allows Javascript to make requests to other domains. Compared to JSONP which only allows the GET HTTP verb, CORS allows all HTTP verbs (GET, POST, PUT, DELETE), making it an ideal candidate for RESTful services. The only drawback: CORS requires a modern browser (see <a href="http://en.wikipedia.org/wiki/Cross-origin_resource_sharing#Browser_support">Wikipedia for details</a>).</p>

<p>CORS can be configured on the server and/or the client side. The following example demonstrates both approaches.</p>

<h3>Server side configuration example (Java)</h3>

<p>The basic idea is to add additional header information to the different <code>Access-Control-Allow-*</code> properties of the HTTP response.</p>

<p>``` java ResponseCorsFilter.java
package ngdemo.web.rest;</p>

<p>import com.google.inject.Singleton;</p>

<p>import javax.servlet.*;
import javax.servlet.http.HttpServletResponse;
import java.io.IOException;</p>

<p>/*</p>

<pre><code>Allow CORS requests.
</code></pre>

<p> */
@Singleton
public class ResponseCorsFilter implements Filter {</p>

<pre><code>@Override
public void init(FilterConfig filterConfig) throws ServletException { }

@Override
public void destroy() { }

@Override
public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain) throws IOException, ServletException {
    if (servletResponse instanceof HttpServletResponse) {
        HttpServletResponse alteredResponse = ((HttpServletResponse) servletResponse);
        addHeadersFor200Response(alteredResponse);
    }
    filterChain.doFilter(servletRequest, servletResponse);
}

private void addHeadersFor200Response(HttpServletResponse response) {
    response.addHeader("Access-Control-Allow-Origin", "*");
    response.addHeader("Access-Control-Allow-Methods", "Cache-Control, Pragma, Origin, Authorization, Content-Type, X-Requested-With");
    response.addHeader("Access-Control-Allow-Headers", "GET, PUT, OPTIONS, X-XSRF-TOKEN");
}
</code></pre>

<p>}
```</p>

<p>The above filter is used in the Guice configuration via the <code>filter(...).through(...)</code> method:</p>

<p>``` java NgDemoApplicationSetup.java
package ngdemo.infrastructure;</p>

<p>import com.google.inject.Guice;
import com.google.inject.Injector;
import com.google.inject.Scopes;
import com.google.inject.servlet.GuiceServletContextListener;
import com.google.inject.servlet.ServletModule;
import com.sun.jersey.api.core.PackagesResourceConfig;
import com.sun.jersey.api.core.ResourceConfig;
import com.sun.jersey.guice.spi.container.servlet.GuiceContainer;
import ngdemo.web.rest.ResponseCorsFilter;
import org.codehaus.jackson.jaxrs.JacksonJsonProvider;</p>

<p>public class NgDemoApplicationSetup extends GuiceServletContextListener {</p>

<pre><code>@Override
protected Injector getInjector() {
    return Guice.createInjector(new ServletModule() {

        @Override
        protected void configureServlets() {
            super.configureServlets();
            ResourceConfig resourceConfig = new PackagesResourceConfig("ngdemo/web");
            for (Class&lt;?&gt; resource : resourceConfig.getClasses()) {
                bind(resource);
            }
            bind(JacksonJsonProvider.class).in(Scopes.SINGLETON);
            serve("/web/*").with(GuiceContainer.class);

            // CORS filter:
            filter("/web/*").through(ResponseCorsFilter.class);
        }
    });
}
</code></pre>

<p>}
```</p>

<h3>Client side configuration example (Javascript)</h3>

<p>The opposite approach, configuring the client instead of the server, works by (1) setting the <code>useXDomain</code> property to true and (2) removing header properties.</p>

<p>``` javascript app.js
&lsquo;use strict&rsquo;;</p>

<p>angular.module(&lsquo;ngdemo&rsquo;)</p>

<pre><code>    .config(['$httpProvider', function ($httpProvider) {
    // ...

    // delete header from client:
    // http://stackoverflow.com/questions/17289195/angularjs-post-data-to-external-rest-api
    $httpProvider.defaults.useXDomain = true;
    delete $httpProvider.defaults.headers.common['X-Requested-With'];
}]);
</code></pre>

<p>```</p>

<h2>Source code for this post</h2>

<p>You can clone a copy of this project here: <a href="https://github.com/draptik/angulardemorestful">https://github.com/draptik/angulardemorestful</a>.</p>

<p>To checkout the correct version for this demo, use the following code:</p>

<p><code>sh
git clone git@github.com:draptik/angulardemorestful.git
cd angulardemorestful
git checkout -f step5-split-frontend-backend-cors
</code></p>

<p>In case you are not using git you can also download the project as ZIP or tar.gz file here: <a href="https://github.com/draptik/angulardemorestful/releases/tag/step5-split-frontend-backend-cors">https://github.com/draptik/angulardemorestful/releases/tag/step5-split-frontend-backend-cors</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RESTful CRUD with AngularJS]]></title>
    <link href="http://draptik.github.io/blog/2013/07/28/restful-crud-with-angularjs/"/>
    <updated>2013-07-28T11:15:00+02:00</updated>
    <id>http://draptik.github.io/blog/2013/07/28/restful-crud-with-angularjs</id>
    <content type="html"><![CDATA[<p>This post will show how to perform typical CRUD (create, read, update and delete) operations in AngularJS when consuming a RESTful web service.</p>

<p>A prerequisite for this demo is a working RESTful web service. For a basic introduction on creating a Java based RESTful web service, see my introduction on how to <a href="http://draptik.github.io/blog/2013/07/13/angularjs-example-using-a-java-restful-web-service/">consume a RESTful web service with AngularJS created by a Java backend</a>. For completeness sake I&rsquo;ve added a Java based sample at the end of this post.</p>

<h2>Frontend (AngularJS)</h2>

<h3>Views (Partials)</h3>

<p>We will create three views.</p>

<p>The first view will display all users (<code>user-list.html</code>):</p>

<p><img src="/images/posts/angular/userlist.png" width="400" height="400"></p>

<p>The view also provides links to edit (<code>ng-click="editUser(user.id)"</code>) and delete (<code>ng-click="deleteUser(user.id)"</code>) specific users as well as a link to create a new user (<code>ng-click="createUser()"</code>).</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;div class="span6">
</span><span class='line'>    &lt;table class="table table-striped table-condensed">
</span><span class='line'>        &lt;thead>
</span><span class='line'>        &lt;tr>
</span><span class='line'>            &lt;th style="min-width: 80px;">First name&lt;/th>
</span><span class='line'>            &lt;th style="min-width: 80px;">Last name&lt;/th>
</span><span class='line'>            &lt;th style="width:20px;">&nbsp;&lt;/th>
</span><span class='line'>            &lt;th style="width:20px;">&nbsp;&lt;/th>
</span><span class='line'>        &lt;/tr>
</span><span class='line'>        &lt;/thead>
</span><span class='line'>        &lt;tbody>
</span><span class='line'>        &lt;tr ng-repeat="user in users">
</span><span class='line'>            &lt;td>{{ user.firstName }}&lt;/td>
</span><span class='line'>            &lt;td>{{ user.lastName }}&lt;/td>
</span><span class='line'>            &lt;td>&lt;a ng-click="editUser(user.id)" class="btn btn-small btn-primary">edit&lt;/a>&lt;/td>
</span><span class='line'>            &lt;td>&lt;a ng-click="deleteUser(user.id)" class="btn btn-small btn-danger">delete&lt;/a>&lt;/td>
</span><span class='line'>        &lt;/tr>
</span><span class='line'>        &lt;/tbody>
</span><span class='line'>    &lt;/table>
</span><span class='line'>    &lt;a ng-click="createNewUser()" class="btn btn-small">create new user&lt;/a>
</span><span class='line'>&lt;/div>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>&lt;p></span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>The second and third view (<code>user-detail.html</code> and <code>user-creation.html</code>) both provide a form for entering the user properties.</p>

<p><img src="/images/posts/angular/usercreationdetail.png" width="600" height="600"></p>

<p>They only differ in the actions provided. These actions (<code>cancel()</code>, <code>updateUser()</code>, <code>createNewUser()</code>) are invoked using <code>ng-click</code>:</p>

<p>``` xml user-[detail|creation].html</p>

<div class="container">
    <h1>User detail</h1>

    <form novalidate="novalidate" class="form-horizontal">
        <div class="control-group">
            <label class="control-label" for="inputFirstName">First name:</label>
            <div class="controls">
                <input type="text" id="inputFirstName" ng-model="user.firstName"/>
            </div>
        </div>
        <div class="control-group">
            <label class="control-label" for="inputLastName">Last name:</label>
            <div class="controls">
                <input type="text" id="inputLastName" ng-model="user.lastName"/>
            </div>
        </div>
        <div class="control-group">
            <div class="controls">
                <!-- user-detail.html: -->
                <a ng-click="cancel()" class="btn btn-small">cancel</a>
                <a ng-click="updateUser()" class="btn btn-small btn-primary">update user</a>

                <!-- user-creation.html: -->
                <a ng-click="createNewUser()" class="btn btn-small btn-primary">create new user</a>
            </div>
        </div>
    </form>
</div>


<p>```</p>

<h3>Controller</h3>

<p>Next we will create three controllers corresponding to the three views.</p>

<h4>UserListCtrl</h4>

<p><code>UserListCtrl</code> provides three functions <code>editUser</code>, <code>deleteUser</code> and <code>createUser</code>.</p>

<ul>
<li><code>editUser</code> and <code>createUser</code> merely redirect to a different partial view using AngularJs&rsquo;s <code>$location</code> function.</li>
<li><code>deleteUser</code> calls the <code>UserFactory</code> service method <code>delete</code> (which we will create shortly).</li>
</ul>


<p>Furthermore the <code>$scope.users</code> is filled with the result from the <code>UsersFactory.query()</code> function.</p>

<p>Note that all required dependencies are injected into the controller&rsquo;s signature (<code>function ($scope, UsersFactory, UserFactory, $location)</code>).</p>

<p>``` javascript controller.js
var app = angular.module(&lsquo;ngdemo.controllers&rsquo;, []);</p>

<p>app.controller(&lsquo;UserListCtrl&rsquo;, [&lsquo;$scope&rsquo;, &lsquo;UsersFactory&rsquo;, &lsquo;UserFactory&rsquo;, &lsquo;$location&rsquo;,</p>

<pre><code>function ($scope, UsersFactory, UserFactory, $location) {

    // callback for ng-click 'editUser':
    $scope.editUser = function (userId) {
        $location.path('/user-detail/' + userId);
    };

    // callback for ng-click 'deleteUser':
    $scope.deleteUser = function (userId) {
        UserFactory.delete({ id: userId });
        $scope.users = UsersFactory.query();
    };

    // callback for ng-click 'createUser':
    $scope.createNewUser = function () {
        $location.path('/user-creation');
    };

    $scope.users = UsersFactory.query();
}]);
/* ... */
</code></pre>

<p>```</p>

<h4>UserDetailCtrl and UserCreationCtrl</h4>

<p><code>UserDetailCtrl</code> provides the function <code>updateUser</code>, which in turn invokes the service method <code>UserFactory.update</code>. The <code>$scope.user</code> is filled with the result from calling <code>UserFactory.show</code>. <code>cancel</code> is just a convenient link redirecting back to the <code>user-list</code> view.</p>

<p><code>UserCreationCtrl</code> provides the function <code>createNewUser</code>, calling <code>UsersFactory.create</code>.</p>

<p>Again, both controllers use <code>$location</code> to redirect back to the <code>user-list</code> partial view.</p>

<p>``` javascript controller.js
/<em> &hellip; </em>/
app.controller(&lsquo;UserDetailCtrl&rsquo;, [&lsquo;$scope&rsquo;, &lsquo;$routeParams&rsquo;, &lsquo;UserFactory&rsquo;, &lsquo;$location&rsquo;,</p>

<pre><code>function ($scope, $routeParams, UserFactory, $location) {

    // callback for ng-click 'updateUser':
    $scope.updateUser = function () {
        UserFactory.update($scope.user);
        $location.path('/user-list');
    };

    // callback for ng-click 'cancel':
    $scope.cancel = function () {
        $location.path('/user-list');
    };

    $scope.user = UserFactory.show({id: $routeParams.id});
}]);
</code></pre>

<p>app.controller(&lsquo;UserCreationCtrl&rsquo;, [&lsquo;$scope&rsquo;, &lsquo;UsersFactory&rsquo;, &lsquo;$location&rsquo;,</p>

<pre><code>function ($scope, UsersFactory, $location) {

    // callback for ng-click 'createNewUser':
    $scope.createNewUser = function () {
        UsersFactory.create($scope.user);
        $location.path('/user-list');
    }
}]);    
</code></pre>

<p>```</p>

<p>Don&rsquo;t forget to map the views to the corresponding controllers in <code>app.js</code> using the <code>$routeProvider</code>:</p>

<p>``` javascript app.js
angular.module(&lsquo;ngdemo&rsquo;, [&lsquo;ngdemo.filters&rsquo;, &lsquo;ngdemo.services&rsquo;, &lsquo;ngdemo.directives&rsquo;, &lsquo;ngdemo.controllers&rsquo;]).</p>

<pre><code>config(['$routeProvider', function ($routeProvider) {
    $routeProvider.when('/user-list', {templateUrl: 'partials/user-list.html', controller: 'UserListCtrl'});
    $routeProvider.when('/user-detail/:id', {templateUrl: 'partials/user-detail.html', controller: 'UserDetailCtrl'});
    $routeProvider.when('/user-creation', {templateUrl: 'partials/user-creation.html', controller: 'UserCreationCtrl'});
    $routeProvider.otherwise({redirectTo: '/user-list'});
}]);
</code></pre>

<p>```</p>

<h3>Service</h3>

<p>AngularJS can consume the web service using <code>$resource</code>. This module is injected via <code>'ngResource'</code>.</p>

<p>We create two factories:</p>

<ul>
<li><code>UsersFactory</code> (note the plural s) calls the web service with methods not requiring an id (<code>query</code> and <code>create</code>).</li>
<li><code>UserFactory</code> calls the web service with methods requiring a user id (<code>show</code>, <code>update</code> and <code>delete</code>).</li>
</ul>


<p>``` javascript services.js
var services = angular.module(&lsquo;ngdemo.services&rsquo;, [&lsquo;ngResource&rsquo;]);</p>

<p>services.factory(&lsquo;UsersFactory&rsquo;, function ($resource) {</p>

<pre><code>return $resource('/ngdemo/web/users', {}, {
    query: { method: 'GET', isArray: true },
    create: { method: 'POST' }
})
</code></pre>

<p>});</p>

<p>services.factory(&lsquo;UserFactory&rsquo;, function ($resource) {</p>

<pre><code>return $resource('/ngdemo/web/users/:id', {}, {
    show: { method: 'GET' },
    update: { method: 'PUT', params: {id: '@id'} },
    delete: { method: 'DELETE', params: {id: '@id'} }
})
</code></pre>

<p>});
```</p>

<h2>Backend (Java)</h2>

<p>Here is an example of a RESTful web service created with Java:</p>

<p>``` java UserRestService.java
package ngdemo.web.rest;</p>

<p>import com.google.inject.Inject;
import ngdemo.domain.User;
import ngdemo.service.contract.UserService;</p>

<p>import javax.ws.rs.*;
import javax.ws.rs.core.MediaType;
import java.util.List;</p>

<p>@Path(&ldquo;/users&rdquo;)
public class UserRestService {</p>

<pre><code>private final UserService userService;

@Inject
public UserRestService(UserService userService) {
    this.userService = userService;
}

@GET
@Produces(MediaType.APPLICATION_JSON)
public List&lt;User&gt; getAllUsersInJSON() {
    return userService.getAllUsers();
}

@GET
@Path("{id}")
@Produces(MediaType.APPLICATION_JSON)
public User getUserById(@PathParam("id") int id) {
    return userService.getById(id);
}

@POST
@Consumes(MediaType.APPLICATION_JSON)
@Produces(MediaType.APPLICATION_JSON)
public User create(User user) {
    return userService.createNewUser(user);
}

@PUT
@Path("{id}")
@Consumes(MediaType.APPLICATION_JSON)
@Produces(MediaType.APPLICATION_JSON)
public User update(User user) {
    return userService.update(user);
}

@DELETE
@Path("{id}")
@Produces(MediaType.APPLICATION_JSON)
public void remove(@PathParam("id") int id) {
    userService.remove(id);
}
</code></pre>

<p>}
```</p>

<p>You can clone a copy of this project here: <a href="https://github.com/draptik/angulardemorestful">https://github.com/draptik/angulardemorestful</a>.</p>

<p>To checkout the correct version for this demo, use the following code:</p>

<p><code>sh
git clone git@github.com:draptik/angulardemorestful.git
cd angulardemorestful
git checkout -f step4-angularjs-crud
</code></p>

<p>In case you are not using git you can also download the project as ZIP or tar.gz file here: <a href="https://github.com/draptik/angulardemorestful/releases/tag/step4-angularjs-crud">https://github.com/draptik/angulardemorestful/releases/tag/step4-angularjs-crud</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AngularJS example using a Java RESTful web service]]></title>
    <link href="http://draptik.github.io/blog/2013/07/13/angularjs-example-using-a-java-restful-web-service/"/>
    <updated>2013-07-13T20:12:00+02:00</updated>
    <id>http://draptik.github.io/blog/2013/07/13/angularjs-example-using-a-java-restful-web-service</id>
    <content type="html"><![CDATA[<p><a href="http://angularjs.org/">AngularJS</a> is the current MVV-Whatever JavaScript framework by Google.
Among other things, it provides bidirectional data binding.</p>

<p>Although I&rsquo;m neither a Java nor a JavaScript expert, I choose the following scenario for my &lsquo;Hello-World&rsquo; example:</p>

<ol>
<li><p>Java backend provides a RESTful web service.</p></li>
<li><p>AngularJS consumes the web service.</p></li>
</ol>


<p>That&rsquo;s it.</p>

<h1>Project structure</h1>

<p>I intentionally put the backend and frontend code in the same project to simplify the example. In a real project you probably want to have seperate projects for front- and backend.</p>

<p><code>sh
+---------------------------------------------------+
| demo project                                      |
|                                                   |
| +----------------+              +---------------+ |
| | backend (Java) | &lt; -(REST)- &gt; | frontend (JS) | |
| +----------------+              +---------------+ |
|                                                   |
+---------------------------------------------------+
</code></p>

<p>Since the backend is Java based, I used a Maven default structure (<code>maven-archetype-site-simple</code>):</p>

<p>``` sh project structure
├── _documentation
│   └── readme.txt
├── ngdemo.iml
├── pom.xml
└── src</p>

<pre><code>└── main
    ├── java
    │   └── ngdemo
    │       ├── domain
    │       │   └── User.java
    │       ├── rest
    │       │   └── UserRestService.java
    │       └── service
    │           └── UserService.java
    └── webapp
        ├── css
        │   └── app.css
        ├── img
        ├── index-async.html
        ├── index.html
        ├── index.jsp
        ├── js
        │   ├── app.js
        │   ├── controllers.js
        │   ├── directives.js
        │   ├── filters.js
        │   └── services.js
        ├── lib
        │   └── angular
        │       ├── angular-cookies.js
        │       ├── angular-cookies.min.js
        │       ├── angular.js
        │       ├── angular-loader.js
        │       ├── angular-loader.min.js
        │       ├── angular.min.js
        │       ├── angular-resource.js
        │       ├── angular-resource.min.js
        │       ├── angular-sanitize.js
        │       ├── angular-sanitize.min.js
        │       └── version.txt
        ├── partials
        │   └── partial1.html
        └── WEB-INF
            └── web.xml
</code></pre>

<p>```</p>

<p><code>src/main/java</code> is the backend.</p>

<p><code>src/main/webapp/js</code> is the frontend.</p>

<p><code>src/main/webapp/</code> also includes a copy of angular-seed.</p>

<h1>RESTful web service (backend)</h1>

<p><a href="https://jersey.java.net/">Jersey</a> is the Java reference implementation for providing REST.</p>

<p>Install the following dependencies in your <code>pom.xml</code>:</p>

<p>``` xml pom.xml</p>

<!-- .. -->


<!-- RESTful web service: Jersey -->


<p><dependency></p>

<pre><code>&lt;groupId&gt;com.sun.jersey&lt;/groupId&gt;
&lt;artifactId&gt;jersey-server&lt;/artifactId&gt;
&lt;version&gt;1.17.1&lt;/version&gt;
</code></pre>

<p></dependency>
<dependency></p>

<pre><code>&lt;groupId&gt;com.sun.jersey&lt;/groupId&gt;
&lt;artifactId&gt;jersey-servlet&lt;/artifactId&gt;
&lt;version&gt;1.17.1&lt;/version&gt;
</code></pre>

<p></dependency>
<dependency></p>

<pre><code>&lt;groupId&gt;com.sun.jersey&lt;/groupId&gt;
&lt;artifactId&gt;jersey-json&lt;/artifactId&gt;
&lt;version&gt;1.17.1&lt;/version&gt;
</code></pre>

<p></dependency></p>

<!-- .. -->


<p>```</p>

<p>Add the following servlet snippet to your <code>web.xml</code>:</p>

<p>``` html web.xml</p>

<!-- .. -->


<p><servlet></p>

<pre><code>&lt;servlet-name&gt;jersey-serlvet&lt;/servlet-name&gt;

&lt;servlet-class&gt;
    com.sun.jersey.spi.container.servlet.ServletContainer
&lt;/servlet-class&gt;

&lt;init-param&gt;
    &lt;param-name&gt;com.sun.jersey.config.property.packages&lt;/param-name&gt;
    &lt;param-value&gt;ngdemo.rest&lt;/param-value&gt;
&lt;/init-param&gt;

&lt;init-param&gt;
    &lt;param-name&gt;com.sun.jersey.api.json.POJOMappingFeature&lt;/param-name&gt;
    &lt;param-value&gt;true&lt;/param-value&gt;
&lt;/init-param&gt;

&lt;load-on-startup&gt;1&lt;/load-on-startup&gt;
</code></pre>

<p></servlet></p>

<p>&lt;servlet-mapping></p>

<pre><code>&lt;servlet-name&gt;jersey-serlvet&lt;/servlet-name&gt;
&lt;url-pattern&gt;/rest/*&lt;/url-pattern&gt;
</code></pre>

<p>&lt;/servlet-mapping></p>

<!-- .. -->


<p>```</p>

<p>Enough configuration for now: Create a simple <code>User</code> object&hellip;</p>

<p>``` java User.java
package ngdemo.domain;</p>

<p>import javax.xml.bind.annotation.XmlRootElement;</p>

<p>@XmlRootElement
public class User {</p>

<pre><code>private String firstName;
private String lastName;

public String getFirstName() {
    return firstName;
}

public void setFirstName(String firstName) {
    this.firstName = firstName;
}

public String getLastName() {
    return lastName;
}

public void setLastName(String lastName) {
    this.lastName = lastName;
}
</code></pre>

<p>}
```</p>

<p>&hellip;and a service class&hellip;</p>

<p>``` java UserService.java
package ngdemo.service;</p>

<p>import ngdemo.domain.User;</p>

<p>public class UserService {</p>

<pre><code>public User getDefaultUser() {
    User user = new User();
    user.setFirstName("JonFromREST");
    user.setLastName("DoeFromREST");
    return user;
}
</code></pre>

<p>}
```</p>

<p>&hellip;and finally the RESTful Service&hellip;:</p>

<p>``` java UserRestService.java
package ngdemo.rest;</p>

<p>import ngdemo.domain.User;
import ngdemo.service.UserService;
import ngdemo.service.UserServiceImpl;</p>

<p>import javax.ws.rs.GET;
import javax.ws.rs.Path;
import javax.ws.rs.Produces;
import javax.ws.rs.core.MediaType;</p>

<p>@Path(&ldquo;/users&rdquo;)
public class UserRestService {</p>

<pre><code>@GET
@Produces(MediaType.APPLICATION_JSON)
public User getDefaultUserInJSON() {
    UserService userService = new UserServiceImpl();
    return userService.getDefaultUser();
}
</code></pre>

<p>}
```</p>

<p>Converting the <code>User</code> object to JSON via <code>@Produces(MediaType.APPLICATION_JSON)</code> requires jersey-json in <code>web.xml</code> (<code>POJOMappingFeature</code>).</p>

<h1>Consuming web service from AngularJS (frontend)</h1>

<p>Don&rsquo;t forget to add <code>angular-resources.js</code> to your <code>index.html</code>&hellip;</p>

<p>Consuming the web service:</p>

<p>``` javascript services.js
var services = angular.module(&lsquo;ngdemo.services&rsquo;, [&lsquo;ngResource&rsquo;]);</p>

<p>services.factory(&lsquo;UserFactory&rsquo;, function ($resource) {</p>

<pre><code>return $resource('/ngdemo/rest/users', {}, {
    query: {
        method: 'GET',
        params: {},
        isArray: false
    }
})
</code></pre>

<p>});
```</p>

<p>Usage in controller:</p>

<p>``` javascript controller.js
var app = angular.module(&lsquo;ngdemo.controllers&rsquo;, []);</p>

<p>app.controller(&lsquo;MyCtrl1&rsquo;, [&lsquo;$scope&rsquo;, &lsquo;UserFactory&rsquo;, function ($scope, UserFactory) {</p>

<pre><code>UserFactory.get({}, function (userFactory) {
    $scope.firstname = userFactory.firstName;
})
</code></pre>

<p>}]);
```</p>

<p>Usage in view:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;div>
</span><span class='line'>    &lt;p>
</span><span class='line'>        Result from RESTful service is: {{ firstname }}
</span><span class='line'>    &lt;/p>
</span><span class='line'>&lt;/div>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>&lt;p></span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Et voila:</p>

<p><img src="/images/posts/angular/browser_screenshot.png"></p>

<p>Update (2013-07-18):</p>

<p>You can clone a copy of this project here: <a href="https://github.com/draptik/angulardemorestful">https://github.com/draptik/angulardemorestful</a>.</p>

<p>To checkout the correct version for this demo, use the following code:</p>

<p><code>sh
git clone git@github.com:draptik/angulardemorestful.git
cd angulardemorestful
git checkout -f step1
</code></p>

<p>In case you are not using git you can also download the project as ZIP or tar.gz file here: <a href="https://github.com/draptik/angulardemorestful/releases/tag/step1">https://github.com/draptik/angulardemorestful/releases/tag/step1</a></p>
]]></content>
  </entry>
  
</feed>
