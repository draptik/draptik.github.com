<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: java | draptik]]></title>
  <link href="http://draptik.github.io/blog/categories/java/atom.xml" rel="self"/>
  <link href="http://draptik.github.io/"/>
  <updated>2016-05-11T21:44:59+02:00</updated>
  <id>http://draptik.github.io/</id>
  <author>
    <name><![CDATA[Patrick Drechsler]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[AngularJS and CORS]]></title>
    <link href="http://draptik.github.io/blog/2013/08/19/angularjs-and-cors/"/>
    <updated>2013-08-19T18:47:00+02:00</updated>
    <id>http://draptik.github.io/blog/2013/08/19/angularjs-and-cors</id>
    <content type="html"><![CDATA[<h2>TL;DR</h2>

<p>While splitting my <a href="https://github.com/draptik/angulardemorestful">AngularJS demo app</a> into independent back- and frontend projects (running two different servers) I stumbled across cross domain issues during development. This post describes how to implement CORS on the server and/or client side of an application.</p>

<h2>&hellip;</h2>

<p>This post describes how I split the backend and frontend of my <a href="https://github.com/draptik/angulardemorestful">AngularJS demo app</a> into separate applications.</p>

<p>Hopefully this will simplify switching the used backend technology in the future (i.e. replacing Java with .NET or Node.JS).</p>

<h2>New directory structure</h2>

<p>To begin with I created two new top level folders: <code>backend/java-backend</code> and <code>frontend</code>.
Then I moved all Java code (including Java IDE settings, pom.xml, etc.) to the new <code>java-backend</code> folder.
Since the frontend code (JS, CSS, HTML templates) was previously located in <code>src/main/webapp</code> I moved it to the new frontend folder.</p>

<p>The Java project folder <code>webapp</code> now only contains the following minimal setup:</p>

<p>``` sh
backend/java-backend/src/main/webapp
├── index.jsp
└── WEB-INF</p>

<pre><code>└── web.xml
</code></pre>

<p>```</p>

<p>The <code>frontend</code> folder now has the following (simplified) structure:</p>

<p><code>sh
frontend/
├── css
├── frontend-web-server.js
├── index.html
├── js
│   ├── app.js
│   ├── bootstrap
│   ├── controllers.js
│   ├── directives.js
│   ├── filters.js
│   ├── jquery
│   └── services.js
</code></p>

<h2>Frontend web server</h2>

<p>Not knowing anything about node.js (yet), I just copied the simple <a href="https://github.com/angular/angular-phonecat/blob/master/scripts/web-server.js">web server from Google&rsquo;s AngularJS demo application PhoneCat</a> to <code>frontend/frontend-web-server.js</code>. For this server to run you will have to install node.js on your system. The frontend server will be running on <em>port 8000</em>.</p>

<p><code>sh frontend-web-server.js
// ...
var DEFAULT_PORT = 8000; // &lt;-- frontend port
// ...
</code></p>

<p>We can start/stop the frontend web server using the scripts <code>start_frontend_server.sh</code> and <code>stop_frontend_server.sh</code>.</p>

<h2>Backend web server</h2>

<p>The backend server is Tomcat. We can start/stop the backend web server using the scripts <code>start_java_backend.sh</code> and <code>stop_java_backend.sh</code>. The backend server will be running on <em>port 8080</em>.</p>

<h2>CORS configuration</h2>

<p>Cross-origin resource sharing (<a href="http://en.wikipedia.org/wiki/Cross-origin_resource_sharing">CORS</a>) allows Javascript to make requests to other domains. Compared to JSONP which only allows the GET HTTP verb, CORS allows all HTTP verbs (GET, POST, PUT, DELETE), making it an ideal candidate for RESTful services. The only drawback: CORS requires a modern browser (see <a href="http://en.wikipedia.org/wiki/Cross-origin_resource_sharing#Browser_support">Wikipedia for details</a>).</p>

<p><strong>2014-01-03</strong>
<del>CORS can be configured on the server and/or the client side.</del>
CORS must be configured on the server <strong>and</strong> the client side (Thanks to Richard for the pointer!).
The following example demonstrates <del>both approaches</del> this.</p>

<h3>Server side configuration example (Java)</h3>

<p>The basic idea is to add additional header information to the different <code>Access-Control-Allow-*</code> properties of the HTTP response.</p>

<p>``` java ResponseCorsFilter.java
package ngdemo.web.rest;</p>

<p>import com.google.inject.Singleton;</p>

<p>import javax.servlet.*;
import javax.servlet.http.HttpServletResponse;
import java.io.IOException;</p>

<p>/*</p>

<pre><code>Allow CORS requests.
</code></pre>

<p> */
@Singleton
public class ResponseCorsFilter implements Filter {</p>

<pre><code>@Override
public void init(FilterConfig filterConfig) throws ServletException { }

@Override
public void destroy() { }

@Override
public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain) throws IOException, ServletException {
    if (servletResponse instanceof HttpServletResponse) {
        HttpServletResponse alteredResponse = ((HttpServletResponse) servletResponse);
        addHeadersFor200Response(alteredResponse);
    }
    filterChain.doFilter(servletRequest, servletResponse);
}

private void addHeadersFor200Response(HttpServletResponse response) {
    response.addHeader("Access-Control-Allow-Origin", "*");
    response.addHeader("Access-Control-Allow-Methods", "Cache-Control, Pragma, Origin, Authorization, Content-Type, X-Requested-With");
    response.addHeader("Access-Control-Allow-Headers", "GET, PUT, OPTIONS, X-XSRF-TOKEN");
}
</code></pre>

<p>}
```</p>

<p>The above filter is used in the Guice configuration via the <code>filter(...).through(...)</code> method:</p>

<p>``` java NgDemoApplicationSetup.java
package ngdemo.infrastructure;</p>

<p>import com.google.inject.Guice;
import com.google.inject.Injector;
import com.google.inject.Scopes;
import com.google.inject.servlet.GuiceServletContextListener;
import com.google.inject.servlet.ServletModule;
import com.sun.jersey.api.core.PackagesResourceConfig;
import com.sun.jersey.api.core.ResourceConfig;
import com.sun.jersey.guice.spi.container.servlet.GuiceContainer;
import ngdemo.web.rest.ResponseCorsFilter;
import org.codehaus.jackson.jaxrs.JacksonJsonProvider;</p>

<p>public class NgDemoApplicationSetup extends GuiceServletContextListener {</p>

<pre><code>@Override
protected Injector getInjector() {
    return Guice.createInjector(new ServletModule() {

        @Override
        protected void configureServlets() {
            super.configureServlets();
            ResourceConfig resourceConfig = new PackagesResourceConfig("ngdemo/web");
            for (Class&lt;?&gt; resource : resourceConfig.getClasses()) {
                bind(resource);
            }
            bind(JacksonJsonProvider.class).in(Scopes.SINGLETON);
            serve("/web/*").with(GuiceContainer.class);

            // CORS filter:
            filter("/web/*").through(ResponseCorsFilter.class);
        }
    });
}
</code></pre>

<p>}
```</p>

<h3>Client side configuration example (Javascript)</h3>

<p>The opposite approach, configuring the client instead of the server, works by (1) setting the <code>useXDomain</code> property to true and (2) removing header properties.</p>

<p>``` javascript app.js
&lsquo;use strict&rsquo;;</p>

<p>angular.module(&lsquo;ngdemo&rsquo;)</p>

<pre><code>    .config(['$httpProvider', function ($httpProvider) {
    // ...

    // delete header from client:
    // http://stackoverflow.com/questions/17289195/angularjs-post-data-to-external-rest-api
    $httpProvider.defaults.useXDomain = true;
    delete $httpProvider.defaults.headers.common['X-Requested-With'];
}]);
</code></pre>

<p>```</p>

<h2>Source code for this post</h2>

<p>You can clone a copy of this project here: <a href="https://github.com/draptik/angulardemorestful">https://github.com/draptik/angulardemorestful</a>.</p>

<p>To checkout the correct version for this demo, use the following code:</p>

<p><code>sh
git clone git@github.com:draptik/angulardemorestful.git
cd angulardemorestful
git checkout -f step5-split-frontend-backend-cors
</code></p>

<p>In case you are not using git you can also download the project as ZIP or tar.gz file here: <a href="https://github.com/draptik/angulardemorestful/releases/tag/step5-split-frontend-backend-cors">https://github.com/draptik/angulardemorestful/releases/tag/step5-split-frontend-backend-cors</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Unit testing RESTful services]]></title>
    <link href="http://draptik.github.io/blog/2013/07/19/unit-testing-restful-services/"/>
    <updated>2013-07-19T13:18:00+02:00</updated>
    <id>http://draptik.github.io/blog/2013/07/19/unit-testing-restful-services</id>
    <content type="html"><![CDATA[<p>In my two previous posts I gave an introduction on how to <a href="http://draptik.github.io/blog/2013/07/13/angularjs-example-using-a-java-restful-web-service/">consume a RESTful web service with AngularJS created by a Java backend</a> and <a href="http://draptik.github.io/blog/2013/07/18/guice-in-java-web-application/">use Guice in the Java backend</a>.</p>

<p>In this post I will show how to create a unit test for this web service.</p>

<p>Most of this code is inspired by a <a href="https://sites.google.com/a/athaydes.com/renato-athaydes//posts/jersey_guice_rest_api">blog post from Paulo Renato de Athaydes</a>.</p>

<p>We will need to install some new dependencies:</p>

<ul>
<li><code>jetty-maven-plugin</code></li>
<li><code>junit</code></li>
<li><code>jersey-client</code></li>
<li><code>jersey-grizzly2</code></li>
</ul>


<p><a href="https://grizzly.java.net/">Grizzly</a> will be our web server for testing.</p>

<p>``` xml pom.xml
&lt;?xml version=&ldquo;1.0&rdquo; encoding=&ldquo;UTF-8&rdquo;?>
&lt;project xmlns=&ldquo;<a href="http://maven.apache.org/POM/4.0.0">http://maven.apache.org/POM/4.0.0</a>&rdquo; xmlns:xsi=&ldquo;<a href="http://www.w3.org/2001/XMLSchema-instance">http://www.w3.org/2001/XMLSchema-instance</a>&rdquo;</p>

<pre><code>     xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd"&gt;
&lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;

&lt;name&gt;ngdemo Maven Webapp&lt;/name&gt;
&lt;groupId&gt;ngdemo&lt;/groupId&gt;
&lt;artifactId&gt;ngdemo&lt;/artifactId&gt;
&lt;packaging&gt;war&lt;/packaging&gt;
&lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;

&lt;properties&gt;
    &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;
    &lt;jersey.version&gt;1.17.1&lt;/jersey.version&gt;
    &lt;guice.version&gt;3.0&lt;/guice.version&gt;
&lt;/properties&gt;

&lt;build&gt;
    &lt;finalName&gt;ngdemo&lt;/finalName&gt;
    &lt;plugins&gt;
        &lt;plugin&gt;
            &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;
            &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;
            &lt;version&gt;3.0&lt;/version&gt;
            &lt;configuration&gt;
                &lt;source&gt;1.7&lt;/source&gt;
                &lt;target&gt;1.7&lt;/target&gt;
            &lt;/configuration&gt;
        &lt;/plugin&gt;
        &lt;plugin&gt;
            &lt;groupId&gt;org.mortbay.jetty&lt;/groupId&gt;
            &lt;artifactId&gt;jetty-maven-plugin&lt;/artifactId&gt;
            &lt;version&gt;8.1.11.v20130520&lt;/version&gt;
            &lt;configuration&gt;
                &lt;scanIntervalSeconds&gt;10&lt;/scanIntervalSeconds&gt;
                &lt;connectors&gt;
                    &lt;connector implementation="org.eclipse.jetty.nio.SelectChannelConnector"&gt;
                        &lt;port&gt;8080&lt;/port&gt;
                        &lt;maxIdleTime&gt;60000&lt;/maxIdleTime&gt;
                    &lt;/connector&gt;
                &lt;/connectors&gt;
                &lt;stopKey/&gt;
                &lt;stopPort/&gt;
            &lt;/configuration&gt;
        &lt;/plugin&gt;
    &lt;/plugins&gt;
&lt;/build&gt;

&lt;dependencies&gt;

    &lt;!-- javax: XML binding --&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;javax.xml.bind&lt;/groupId&gt;
        &lt;artifactId&gt;jaxb-api&lt;/artifactId&gt;
        &lt;version&gt;2.1&lt;/version&gt;
    &lt;/dependency&gt;

    &lt;!-- RESTful web service: Jersey ====================================== --&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;com.sun.jersey&lt;/groupId&gt;
        &lt;artifactId&gt;jersey-server&lt;/artifactId&gt;
        &lt;version&gt;${jersey.version}&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;com.sun.jersey&lt;/groupId&gt;
        &lt;artifactId&gt;jersey-servlet&lt;/artifactId&gt;
        &lt;version&gt;${jersey.version}&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;com.sun.jersey&lt;/groupId&gt;
        &lt;artifactId&gt;jersey-json&lt;/artifactId&gt;
        &lt;version&gt;${jersey.version}&lt;/version&gt;
    &lt;/dependency&gt;

    &lt;!-- Guice ============================================================= --&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;com.google.inject&lt;/groupId&gt;
        &lt;artifactId&gt;guice&lt;/artifactId&gt;
        &lt;version&gt;${guice.version}&lt;/version&gt;
    &lt;/dependency&gt;

    &lt;dependency&gt;
        &lt;groupId&gt;com.google.inject.extensions&lt;/groupId&gt;
        &lt;artifactId&gt;guice-servlet&lt;/artifactId&gt;
        &lt;version&gt;${guice.version}&lt;/version&gt;
    &lt;/dependency&gt;

    &lt;dependency&gt;
        &lt;groupId&gt;com.sun.jersey.contribs&lt;/groupId&gt;
        &lt;artifactId&gt;jersey-guice&lt;/artifactId&gt;
        &lt;version&gt;${jersey.version}&lt;/version&gt;
    &lt;/dependency&gt;

    &lt;!-- Required for bypassing web.xml via Guice. Used in TestServlet.java --&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;javax.servlet&lt;/groupId&gt;
        &lt;artifactId&gt;javax.servlet-api&lt;/artifactId&gt;
        &lt;version&gt;3.0.1&lt;/version&gt;
        &lt;scope&gt;provided&lt;/scope&gt;
    &lt;/dependency&gt;


    &lt;!-- Unit testing ====================================================== --&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;junit&lt;/groupId&gt;
        &lt;artifactId&gt;junit&lt;/artifactId&gt;
        &lt;version&gt;4.11&lt;/version&gt;
        &lt;scope&gt;test&lt;/scope&gt;
    &lt;/dependency&gt;

    &lt;dependency&gt;
        &lt;groupId&gt;com.sun.jersey&lt;/groupId&gt;
        &lt;artifactId&gt;jersey-client&lt;/artifactId&gt;
        &lt;version&gt;${jersey.version}&lt;/version&gt;
        &lt;scope&gt;test&lt;/scope&gt;
    &lt;/dependency&gt;

    &lt;dependency&gt;
        &lt;groupId&gt;com.sun.jersey&lt;/groupId&gt;
        &lt;artifactId&gt;jersey-grizzly2&lt;/artifactId&gt;
        &lt;version&gt;${jersey.version}&lt;/version&gt;
        &lt;scope&gt;test&lt;/scope&gt;
    &lt;/dependency&gt;
&lt;/dependencies&gt;
</code></pre>

<p></project>
```</p>

<p>Our class under test is <code>UserRestService.java</code>:</p>

<p>``` java UserRestService.java
package ngdemo.rest;</p>

<p>import com.google.inject.Inject;
import ngdemo.domain.User;
import ngdemo.service.contract.UserService;</p>

<p>import javax.ws.rs.GET;
import javax.ws.rs.Path;
import javax.ws.rs.Produces;
import javax.ws.rs.core.MediaType;</p>

<p>@Path(&ldquo;/users&rdquo;)
public class UserRestService {</p>

<pre><code>private final UserService userService;

@Inject
public UserRestService(UserService userService) {
    this.userService = userService;
}

@GET
@Produces(MediaType.APPLICATION_JSON)
public User getDefaultUserInJSON() {
    return userService.getDefaultUser();
}
</code></pre>

<p>}
```</p>

<p>Here is the corresponding unit test class <code>UserRestServiceTest.java</code>:</p>

<p>``` java UserRestServiceTest.java
package ngdemo.tests;</p>

<p>import com.google.inject.Guice;
import com.google.inject.Injector;
import com.google.inject.servlet.ServletModule;
import com.sun.jersey.api.client.Client;
import com.sun.jersey.api.client.ClientResponse;
import com.sun.jersey.api.client.WebResource;
import com.sun.jersey.api.client.config.DefaultClientConfig;
import com.sun.jersey.api.container.grizzly2.GrizzlyServerFactory;
import com.sun.jersey.api.core.PackagesResourceConfig;
import com.sun.jersey.api.core.ResourceConfig;
import com.sun.jersey.core.spi.component.ioc.IoCComponentProviderFactory;
import com.sun.jersey.guice.spi.container.GuiceComponentProviderFactory;
import ngdemo.repositories.contract.UserRepository;
import ngdemo.repositories.impl.UserRepositoryImpl;
import ngdemo.service.contract.UserService;
import ngdemo.service.impl.UserServiceImpl;
import org.glassfish.grizzly.http.server.HttpServer;
import org.junit.After;
import org.junit.Before;
import org.junit.Test;</p>

<p>import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.UriBuilder;
import java.io.IOException;
import java.net.URI;</p>

<p>import static junit.framework.Assert.assertEquals;</p>

<p>public class UserRestServiceTest {</p>

<pre><code>static final URI BASE_URI = getBaseURI();
HttpServer server;

private static URI getBaseURI() {
    return UriBuilder.fromUri("http://localhost/").port(9998).build();
}

@Before
public void startServer() throws IOException {
    System.out.println("Starting grizzly...");

    Injector injector = Guice.createInjector(new ServletModule() {
        @Override
        protected void configureServlets() {
            bind(UserService.class).to(UserServiceImpl.class);
            bind(UserRepository.class).to(UserRepositoryImpl.class);
        }
    });

    ResourceConfig rc = new PackagesResourceConfig("ngdemo.rest");
    IoCComponentProviderFactory ioc = new GuiceComponentProviderFactory(rc, injector);
    server = GrizzlyServerFactory.createHttpServer(BASE_URI + "rest/", rc, ioc);

    System.out.println(String.format("Jersey app started with WADL available at "
            + "%srest/application.wadl\nTry out %sngdemo\nHit enter to stop it...",
            BASE_URI, BASE_URI));
}

@After
public void stopServer() {
    server.stop();
}

@Test
public void testGetDefaultUser() throws IOException {
    Client client = Client.create(new DefaultClientConfig());
    WebResource service = client.resource(getBaseURI());
    ClientResponse resp = service.path("rest").path("users")
            .accept(MediaType.APPLICATION_JSON)
            .get(ClientResponse.class);
    System.out.println("Got stuff: " + resp);
    String text = resp.getEntity(String.class);

    assertEquals(200, resp.getStatus());
    assertEquals("{\"firstName\":\"JonFromREST\",\"lastName\":\"DoeFromREST\"}", text);
}
</code></pre>

<p>}
```</p>

<p>In the <code>startServer</code> method we create an injector for Guice, which we can then pass into the <code>GuiceComponentProviderFactory</code> to create the inversion of control (IoC) container.</p>

<p>Together with the <code>ResourceConfig</code> the IoC container is passed to Grizzly&rsquo;s server factory to create the web server for testing.</p>

<p>Within the actual test method <code>testGetDefaultUser</code> we only have to setup the Jersey <code>Client</code> to retrieve the response (from the Grizzly server).</p>

<p>Here&rsquo;s the test output from Maven:</p>

<p>``` sh
$ mvn test</p>

<h2>&hellip;</h2>

<h2> T E S T S</h2>

<p>Running ngdemo.tests.UserRestServiceTest
Starting grizzly&hellip;
Jul 19, 2013 1:50:35 PM com.sun.jersey.api.core.PackagesResourceConfig init
INFO: Scanning for root resource and provider classes in the packages:
  ngdemo.rest
Jul 19, 2013 1:50:35 PM com.sun.jersey.api.core.ScanningResourceConfig logClasses
INFO: Root resource classes found:
  class ngdemo.rest.UserRestService
Jul 19, 2013 1:50:35 PM com.sun.jersey.api.core.ScanningResourceConfig init
INFO: No provider classes found.
Jul 19, 2013 1:50:35 PM com.sun.jersey.server.impl.application.WebApplicationImpl _initiate
INFO: Initiating Jersey application, version &lsquo;Jersey: 1.17.1 02/28/2013 12:47 PM&rsquo;
Jul 19, 2013 1:50:36 PM com.sun.jersey.guice.spi.container.GuiceComponentProviderFactory getComponentProvider
INFO: Binding ngdemo.rest.UserRestService to GuiceInstantiatedComponentProvider
Jul 19, 2013 1:50:37 PM org.glassfish.grizzly.http.server.NetworkListener start
INFO: Started listener bound to [localhost:9998]
Jul 19, 2013 1:50:37 PM org.glassfish.grizzly.http.server.HttpServer start
INFO: [HttpServer] Started.
Jersey app started with WADL available at <a href="http://localhost:9998/rest/application.wadl">http://localhost:9998/rest/application.wadl</a>
Try out <a href="http://localhost:9998/ngdemo">http://localhost:9998/ngdemo</a>
Hit enter to stop it&hellip;
Got stuff: GET <a href="http://localhost:9998/rest/users">http://localhost:9998/rest/users</a> returned a response status of 200 OK
Jul 19, 2013 1:50:37 PM org.glassfish.grizzly.http.server.NetworkListener stop
INFO: Stopped listener bound to [localhost:9998]
Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 2.604 sec</p>

<p>Results :</p>

<p>Tests run: 1, Failures: 0, Errors: 0, Skipped: 0</p>

<p>[INFO] &mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;
[INFO] BUILD SUCCESS
[INFO] &mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;
[INFO] Total time: 6.378s
```</p>

<p>Test time is 2.6 sec. Not bad considering we are starting a web server, deploying our app, creating a client, running the test and shutting down the web server.</p>

<p>Running this test from within IntelliJ takes: 0.009 sec&hellip;</p>

<p>You can clone a copy of this project here: <a href="https://github.com/draptik/angulardemorestful">https://github.com/draptik/angulardemorestful</a>.</p>

<p>To checkout the correct version for this demo, use the following code:</p>

<p><code>sh
git clone git@github.com:draptik/angulardemorestful.git
cd angulardemorestful
git checkout -f step3-backend-test
</code></p>

<p>In case you are not using git you can also download the project as ZIP or tar.gz file here: <a href="https://github.com/draptik/angulardemorestful/releases/tag/step3-backend-test">https://github.com/draptik/angulardemorestful/releases/tag/step3-backend-test</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Guice in Java Web Application]]></title>
    <link href="http://draptik.github.io/blog/2013/07/18/guice-in-java-web-application/"/>
    <updated>2013-07-18T21:36:00+02:00</updated>
    <id>http://draptik.github.io/blog/2013/07/18/guice-in-java-web-application</id>
    <content type="html"><![CDATA[<p><a href="http://en.wikipedia.org/wiki/Google_Guice">Google&rsquo;s Guice framework</a> promises to be a lightweight(!) <a href="http://en.wikipedia.org/wiki/Inversion_of_control">Inversion-of-Control</a> (IoC) container.</p>

<p>Advantages compared to <a href="http://en.wikipedia.org/wiki/Spring_Framework">Spring</a>:</p>

<ul>
<li>Spring is much more than an IoC container, and therefore overkill for many projects.</li>
<li>Configuration by code. <em>NO XML</em>.</li>
</ul>


<p>Based on my <a href="http://draptik.github.io/blog/2013/07/13/angularjs-example-using-a-java-restful-web-service/">previous post showing how to use AngularJS with a Java RESTful backend</a> I extended the simple demo application to use Guice.</p>

<p>Let&rsquo;s say we have a <code>UserServiceImpl</code> class which depends on a <code>UserFactory</code> interface. The <code>UserFactory</code> interface is injected into the constructor of the <code>UserServiceImpl</code> class.</p>

<p>The only thing we have to do is add the <code>@Inject</code> annotation to the constructor so that Guice can do its job.</p>

<p>``` java UserServiceImpl.java
package ngdemo.service.impl;</p>

<p>import com.google.inject.Inject;
import com.google.inject.Singleton;
import ngdemo.domain.User;
import ngdemo.service.contract.UserFactory;
import ngdemo.service.contract.UserService;</p>

<p>import java.util.List;</p>

<p>public class UserServiceImpl implements UserService {</p>

<pre><code>private final UserFactory userFactory;

@Inject
public UserServiceImpl(UserFactory userFactory) {
    this.userFactory = userFactory;
}

@Override
public List&lt;User&gt; getDefaultUsers() {
    return this.userFactory.createUsers();
}

@Override
public User getDefaultUser() {
    return this.userFactory.createUser();
}
</code></pre>

<p>}
<code>``
For the IoC container to know which implementation to inject we have to create a Guice *Module* which derives from</code>AbstractModule`:</p>

<p>``` java UserModule.java
package ngdemo.infrastructure;</p>

<p>import com.google.inject.AbstractModule;
import ngdemo.service.contract.UserFactory;
import ngdemo.service.contract.UserService;
import ngdemo.service.impl.UserFactoryImpl;
import ngdemo.service.impl.UserServiceImpl;</p>

<p>public class UserModule extends AbstractModule {</p>

<pre><code>@Override
protected void configure() {
    bind(UserFactory.class).to(UserFactoryImpl.class);
    bind(UserService.class).to(UserServiceImpl.class);
}
</code></pre>

<p>}
```</p>

<p>The <code>UserModule</code> class demonstrates the advantage of Guice vs. Spring: <em>NO XML</em>. When using Spring you normally would have to create Spring beans in an XML file like this:</p>

<p>``` xml applicationContext.xml (pseudo code)
&lt;?xml version=&ldquo;1.0&rdquo; encoding=&ldquo;UTF-8&rdquo;?>
&lt;beans xmlns=&ldquo;<a href="http://www.springframework.org/schema/beans">http://www.springframework.org/schema/beans</a>&rdquo;</p>

<pre><code>xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd"&gt;

&lt;bean id="userService" class="ngdemo.service.impl.UserServiceImpl"&gt;
    &lt;constructor-arg ref="userFactory"/&gt;
&lt;/bean&gt;

&lt;bean id="userFactory" class="ngdemo.service.impl.UserFactoryImpl" /&gt;
</code></pre>

<p></beans>
```</p>

<p>Next we have to create a replacement for the servlets required by the servlet container:</p>

<p>``` java ngdemo.infrastructure.NgDemoApplicationSetup.java
package ngdemo.infrastructure;</p>

<p>import com.google.inject.Guice;
import com.google.inject.Injector;
import com.google.inject.servlet.GuiceServletContextListener;
import com.google.inject.servlet.ServletModule;
import com.sun.jersey.api.core.PackagesResourceConfig;
import com.sun.jersey.api.core.ResourceConfig;
import com.sun.jersey.guice.spi.container.servlet.GuiceContainer;</p>

<p>public class NgDemoApplicationSetup extends GuiceServletContextListener {</p>

<pre><code>@Override
protected Injector getInjector() {

    return Guice.createInjector(new ServletModule() {

        @Override
        protected void configureServlets() {

            super.configureServlets();

            // Configuring Jersey via Guice:
            ResourceConfig resourceConfig = new PackagesResourceConfig("ngdemo/rest");
            for (Class&lt;?&gt; resource : resourceConfig.getClasses()) {
                bind(resource);
            }
            serve("/rest/*").with(GuiceContainer.class);
        }
    }, new UserModule()); // &lt;-- Adding other Guice Dependency Injection Modules
}
</code></pre>

<p>}
```</p>

<p>And finally the file <code>web.xml</code>:</p>

<p>``` xml web.xml
&lt;!DOCTYPE web-app PUBLIC</p>

<pre><code>    "-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN"
    "http://java.sun.com/dtd/web-app_2_3.dtd" &gt;
</code></pre>

<p>&lt;web-app id=&ldquo;WebApp_ID&rdquo; version=&ldquo;2.4&rdquo;</p>

<pre><code>     xmlns="http://java.sun.com/xml/ns/j2ee"
     xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
     xsi:schemaLocation="http://java.sun.com/xml/ns/j2ee
http://java.sun.com/xml/ns/j2ee/web-app_2_4.xsd"&gt;

&lt;display-name&gt;Restful Web Application&lt;/display-name&gt;

&lt;filter&gt;
    &lt;filter-name&gt;guiceFilter&lt;/filter-name&gt;
    &lt;filter-class&gt;com.google.inject.servlet.GuiceFilter&lt;/filter-class&gt;
&lt;/filter&gt;

&lt;filter-mapping&gt;
    &lt;filter-name&gt;guiceFilter&lt;/filter-name&gt;
    &lt;url-pattern&gt;/*&lt;/url-pattern&gt;
&lt;/filter-mapping&gt;

&lt;listener&gt;
    &lt;listener-class&gt;ngdemo.infrastructure.NgDemoApplicationSetup&lt;/listener-class&gt;
&lt;/listener&gt;
</code></pre>

<p>&lt;/web-app>
<code>``
The file</code>web.xml<code>is now free of any</code><servlet><code>tags. The only thing that has to be configured in XML is the</code>&lt;listener-class><code>. The value of the</code>&lt;listener-class><code>is our Java class</code>NgDemoApplicationSetup`, so all further configuration can be defined in a type safe manner.</p>

<p>You can clone a copy of this project here: <a href="https://github.com/draptik/angulardemorestful">https://github.com/draptik/angulardemorestful</a>.</p>

<p>To checkout the correct version for this demo, use the following code:</p>

<p><code>sh
git clone git@github.com:draptik/angulardemorestful.git
cd angulardemorestful
git checkout -f step2-guice
</code></p>

<p>In case you are not using git you can also download the project as ZIP or tar.gz file here: <a href="https://github.com/draptik/angulardemorestful/releases/tag/step2-guice">https://github.com/draptik/angulardemorestful/releases/tag/step2-guice</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AngularJS example using a Java RESTful web service]]></title>
    <link href="http://draptik.github.io/blog/2013/07/13/angularjs-example-using-a-java-restful-web-service/"/>
    <updated>2013-07-13T20:12:00+02:00</updated>
    <id>http://draptik.github.io/blog/2013/07/13/angularjs-example-using-a-java-restful-web-service</id>
    <content type="html"><![CDATA[<p><a href="http://angularjs.org/">AngularJS</a> is the current MVV-Whatever JavaScript framework by Google.
Among other things, it provides bidirectional data binding.</p>

<p>Although I&rsquo;m neither a Java nor a JavaScript expert, I choose the following scenario for my &lsquo;Hello-World&rsquo; example:</p>

<ol>
<li><p>Java backend provides a RESTful web service.</p></li>
<li><p>AngularJS consumes the web service.</p></li>
</ol>


<p>That&rsquo;s it.</p>

<h1>Project structure</h1>

<p>I intentionally put the backend and frontend code in the same project to simplify the example. In a real project you probably want to have seperate projects for front- and backend.</p>

<p><code>sh
+---------------------------------------------------+
| demo project                                      |
|                                                   |
| +----------------+              +---------------+ |
| | backend (Java) | &lt; -(REST)- &gt; | frontend (JS) | |
| +----------------+              +---------------+ |
|                                                   |
+---------------------------------------------------+
</code></p>

<p>Since the backend is Java based, I used a Maven default structure (<code>maven-archetype-site-simple</code>):</p>

<p>``` sh project structure
├── _documentation
│   └── readme.txt
├── ngdemo.iml
├── pom.xml
└── src</p>

<pre><code>└── main
    ├── java
    │   └── ngdemo
    │       ├── domain
    │       │   └── User.java
    │       ├── rest
    │       │   └── UserRestService.java
    │       └── service
    │           └── UserService.java
    └── webapp
        ├── css
        │   └── app.css
        ├── img
        ├── index-async.html
        ├── index.html
        ├── index.jsp
        ├── js
        │   ├── app.js
        │   ├── controllers.js
        │   ├── directives.js
        │   ├── filters.js
        │   └── services.js
        ├── lib
        │   └── angular
        │       ├── angular-cookies.js
        │       ├── angular-cookies.min.js
        │       ├── angular.js
        │       ├── angular-loader.js
        │       ├── angular-loader.min.js
        │       ├── angular.min.js
        │       ├── angular-resource.js
        │       ├── angular-resource.min.js
        │       ├── angular-sanitize.js
        │       ├── angular-sanitize.min.js
        │       └── version.txt
        ├── partials
        │   └── partial1.html
        └── WEB-INF
            └── web.xml
</code></pre>

<p>```</p>

<p><code>src/main/java</code> is the backend.</p>

<p><code>src/main/webapp/js</code> is the frontend.</p>

<p><code>src/main/webapp/</code> also includes a copy of angular-seed.</p>

<h1>RESTful web service (backend)</h1>

<p><a href="https://jersey.java.net/">Jersey</a> is the Java reference implementation for providing REST.</p>

<p>Install the following dependencies in your <code>pom.xml</code>:</p>

<p>``` xml pom.xml</p>

<!-- .. -->


<!-- RESTful web service: Jersey -->


<p><dependency></p>

<pre><code>&lt;groupId&gt;com.sun.jersey&lt;/groupId&gt;
&lt;artifactId&gt;jersey-server&lt;/artifactId&gt;
&lt;version&gt;1.17.1&lt;/version&gt;
</code></pre>

<p></dependency>
<dependency></p>

<pre><code>&lt;groupId&gt;com.sun.jersey&lt;/groupId&gt;
&lt;artifactId&gt;jersey-servlet&lt;/artifactId&gt;
&lt;version&gt;1.17.1&lt;/version&gt;
</code></pre>

<p></dependency>
<dependency></p>

<pre><code>&lt;groupId&gt;com.sun.jersey&lt;/groupId&gt;
&lt;artifactId&gt;jersey-json&lt;/artifactId&gt;
&lt;version&gt;1.17.1&lt;/version&gt;
</code></pre>

<p></dependency></p>

<!-- .. -->


<p>```</p>

<p>Add the following servlet snippet to your <code>web.xml</code>:</p>

<p>``` html web.xml</p>

<!-- .. -->


<p><servlet></p>

<pre><code>&lt;servlet-name&gt;jersey-serlvet&lt;/servlet-name&gt;

&lt;servlet-class&gt;
    com.sun.jersey.spi.container.servlet.ServletContainer
&lt;/servlet-class&gt;

&lt;init-param&gt;
    &lt;param-name&gt;com.sun.jersey.config.property.packages&lt;/param-name&gt;
    &lt;param-value&gt;ngdemo.rest&lt;/param-value&gt;
&lt;/init-param&gt;

&lt;init-param&gt;
    &lt;param-name&gt;com.sun.jersey.api.json.POJOMappingFeature&lt;/param-name&gt;
    &lt;param-value&gt;true&lt;/param-value&gt;
&lt;/init-param&gt;

&lt;load-on-startup&gt;1&lt;/load-on-startup&gt;
</code></pre>

<p></servlet></p>

<p>&lt;servlet-mapping></p>

<pre><code>&lt;servlet-name&gt;jersey-serlvet&lt;/servlet-name&gt;
&lt;url-pattern&gt;/rest/*&lt;/url-pattern&gt;
</code></pre>

<p>&lt;/servlet-mapping></p>

<!-- .. -->


<p>```</p>

<p>Enough configuration for now: Create a simple <code>User</code> object&hellip;</p>

<p>``` java User.java
package ngdemo.domain;</p>

<p>import javax.xml.bind.annotation.XmlRootElement;</p>

<p>@XmlRootElement
public class User {</p>

<pre><code>private String firstName;
private String lastName;

public String getFirstName() {
    return firstName;
}

public void setFirstName(String firstName) {
    this.firstName = firstName;
}

public String getLastName() {
    return lastName;
}

public void setLastName(String lastName) {
    this.lastName = lastName;
}
</code></pre>

<p>}
```</p>

<p>&hellip;and a service class&hellip;</p>

<p>``` java UserService.java
package ngdemo.service;</p>

<p>import ngdemo.domain.User;</p>

<p>public class UserService {</p>

<pre><code>public User getDefaultUser() {
    User user = new User();
    user.setFirstName("JonFromREST");
    user.setLastName("DoeFromREST");
    return user;
}
</code></pre>

<p>}
```</p>

<p>&hellip;and finally the RESTful Service&hellip; (Update 2015-08-07 small fix, thanks Jason):</p>

<p>``` java UserRestService.java
package ngdemo.rest;</p>

<p>import ngdemo.domain.User;
import ngdemo.service.UserService;</p>

<p>import javax.ws.rs.GET;
import javax.ws.rs.Path;
import javax.ws.rs.Produces;
import javax.ws.rs.core.MediaType;</p>

<p>@Path(&ldquo;/users&rdquo;)
public class UserRestService {</p>

<pre><code>@GET
@Produces(MediaType.APPLICATION_JSON)
public User getDefaultUserInJSON() {
    UserService userService = new UserService();
    return userService.getDefaultUser();
}
</code></pre>

<p>}
```</p>

<p>Converting the <code>User</code> object to JSON via <code>@Produces(MediaType.APPLICATION_JSON)</code> requires jersey-json in <code>web.xml</code> (<code>POJOMappingFeature</code>).</p>

<h1>Consuming web service from AngularJS (frontend)</h1>

<p>Don&rsquo;t forget to add <code>angular-resources.js</code> to your <code>index.html</code>&hellip;</p>

<p>Consuming the web service:</p>

<p>``` javascript services.js
var services = angular.module(&lsquo;ngdemo.services&rsquo;, [&lsquo;ngResource&rsquo;]);</p>

<p>services.factory(&lsquo;UserFactory&rsquo;, function ($resource) {</p>

<pre><code>return $resource('/ngdemo/rest/users', {}, {
    query: {
        method: 'GET',
        params: {},
        isArray: false
    }
})
</code></pre>

<p>});
```</p>

<p>Usage in controller:</p>

<p>``` javascript controller.js
var app = angular.module(&lsquo;ngdemo.controllers&rsquo;, []);</p>

<p>app.controller(&lsquo;MyCtrl1&rsquo;, [&lsquo;$scope&rsquo;, &lsquo;UserFactory&rsquo;, function ($scope, UserFactory) {</p>

<pre><code>UserFactory.get({}, function (userFactory) {
    $scope.firstname = userFactory.firstName;
})
</code></pre>

<p>}]);
```</p>

<p>Usage in view:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;div>
</span><span class='line'>    &lt;p>
</span><span class='line'>        Result from RESTful service is: {{ firstname }}
</span><span class='line'>    &lt;/p>
</span><span class='line'>&lt;/div>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>&lt;p></span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Et voila:</p>

<p><img src="/images/posts/angular/browser_screenshot.png"></p>

<p>Update (2013-07-18):</p>

<p>You can clone a copy of this project here: <a href="https://github.com/draptik/angulardemorestful">https://github.com/draptik/angulardemorestful</a>.</p>

<p>To checkout the correct version for this demo, use the following code:</p>

<p><code>sh
git clone git@github.com:draptik/angulardemorestful.git
cd angulardemorestful
git checkout -f step1
</code></p>

<p>In case you are not using git you can also download the project as ZIP or tar.gz file here: <a href="https://github.com/draptik/angulardemorestful/releases/tag/step1">https://github.com/draptik/angulardemorestful/releases/tag/step1</a></p>
]]></content>
  </entry>
  
</feed>
