<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: test | draptik]]></title>
  <link href="http://draptik.github.io/blog/categories/test/atom.xml" rel="self"/>
  <link href="http://draptik.github.io/"/>
  <updated>2019-04-07T19:39:00+00:00</updated>
  <id>http://draptik.github.io/</id>
  <author>
    <name><![CDATA[Patrick Drechsler]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[F# Test Setup for FizzBuzz]]></title>
    <link href="http://draptik.github.io/blog/2018/02/07/fsharp-test-setup-for-fizzbuzz/"/>
    <updated>2018-02-07T20:53:43+00:00</updated>
    <id>http://draptik.github.io/blog/2018/02/07/fsharp-test-setup-for-fizzbuzz</id>
    <content type="html"><![CDATA[<p>In my <a href="http://draptik.github.io/blog/2018/02/05/fsharp-setup-linux-fizzbuzz/">previous post</a> we setup a basic F# project in Linux.</p>

<p>In this post I would like to show how to setup an idiomatic F# testing environment using FsUnit.</p>

<h4>Side note for people unfamiliar with .NET</h4>

<p>Actually, it&rsquo;s not a project, but a &ldquo;solution&rdquo;. To clear things up for people not familiar with the .NET ecosystem: In .NET, the top level configuration is called a &ldquo;solution&rdquo; and resides in a <code>*.sln</code> file. A solution references &ldquo;projects&rdquo;. Each project configuration is stored in a <code>*.fsproj</code> file (F#) or a <code>*.csproj</code> file (C#). Projects can reference each other. This information is stored in the <code>*.[f|c]sproj</code> file.</p>

<p>We have 2 projects (<code>FizzBuzz</code> and <code>FizzBuzz.Tests</code>), each with a <code>*.fsproj</code> file. The <code>FizzBuzz.Tests.fsproj</code> references the <code>FizzBuzz.fsproj</code> file (see the <a href="http://draptik.github.io/blog/2018/02/05/fsharp-setup-linux-fizzbuzz/">previous post</a> for details):
<code>
.
├── FizzBuzz
│   ├── FizzBuzz.fsproj
│   ├── ...
├── FizzBuzz.Tests
│   ├── FizzBuzz.Tests.fsproj
│   ├── ...
└── fsharp-kata-fizzbuzz.sln
</code></p>

<h3>Current state</h3>

<p>This is the current state of our test:
<code>`fsharp
[&lt;Fact&gt;]
let</code>Array with Number 1 returns &lsquo;one&rsquo;`` () =</p>

<pre><code>let result = FizzBuzz.Generate [1]
Assert.Equal(result, "one")
</code></pre>

<p>```</p>

<ul>
<li><code>[&lt;Fact&gt;]</code>: this is F#&rsquo;s annotation style. The same as C# <code>[Fact]</code> or Java <code>@Fact</code></li>
<li><code>Array with Number 1 returns 'one'</code>: Method name in double back-ticks improves readability, especially in unit tests. No CamelCasing or snake_casing needed. It&rsquo;s an F# language feature.</li>
<li><code>Assert.Equal(...)</code>: This is probably familiar to everyone who has ever written a unit test. Every assertion library has a different signature: Is it <code>Equal(expected, actual)</code> or <code>Equal(actual, expected)</code>? I hate this! Thankfully there are alternative assertion libraries. Example: In C# you can write <code>actual.Should().Be(expected)</code> (using <a href="http://fluentassertions.com/"><code>FluentAssertions</code></a>). The same is true for F#.</li>
</ul>


<h3>FsUnit: Idiomatic assertions</h3>

<p>What does &ldquo;idiomatic&rdquo; mean? For programming languages, it means: Writing code as most people, who are used to the language, would write the code (how a &ldquo;native&rdquo; would express an idea, a concept, an algorithm, etc). Simple example: In Java and JS, the first character of a method name should be lower case. In C#, the first character should be upper case (yes, even if the method is private!). The code will still compile if you don&rsquo;t comply to these conventions, but it&rsquo;s not &ldquo;idiomatic&rdquo;. Same goes for &ldquo;For Loops&rdquo; vs using a &ldquo;Map&rdquo; functions: In some languages one concept is preferred over the other.</p>

<p><code>FsUnit</code> brings <strong>pipes</strong> to F# unit tests. Pipes are used extensively in F# and should be familiar to most linux shell users: Bash uses the <code>|</code> symbol as operator to redirect the output of one expression to the input of another expression. In F# the pipe operator is <code>|&gt;</code>. The concept might seem similar to using &ldquo;Method Chaining&rdquo; in C# (it&rsquo;s not, but close enough in this context).</p>

<p>Example:
```fsharp
// instead of
Assert.Equal(1 + 1, 2)</p>

<p>// idiomatic F# (using pipe) with FsUnit:
1 + 1 |> should equal 2
```</p>

<h4>Installing FsUnit</h4>

<p><code>sh
cd FizzBuzz.Tests
dotnet add package FsUnit.Xunit
</code></p>

<p>File <code>FizzBuzz.Tests/FizzBuzz.Tests.fsproj</code> should now look like this (plus/minus some version numbers):
```xml
<Project Sdk="Microsoft.NET.Sdk"></p>

<p>  <PropertyGroup></p>

<pre><code>&lt;TargetFramework&gt;netcoreapp2.0&lt;/TargetFramework&gt;

&lt;IsPackable&gt;false&lt;/IsPackable&gt;
</code></pre>

<p>  </PropertyGroup></p>

<p>  <ItemGroup></p>

<pre><code>&lt;Compile Include="Tests.fs" /&gt;
&lt;Compile Include="Program.fs" /&gt;
</code></pre>

<p>  </ItemGroup></p>

<p>  <ItemGroup></p>

<pre><code>&lt;PackageReference Include="FsUnit.Xunit" Version="3.0.0" /&gt;
&lt;PackageReference Include="Microsoft.NET.Test.Sdk" Version="15.5.0" /&gt;
&lt;PackageReference Include="xunit" Version="2.3.1" /&gt;
&lt;PackageReference Include="xunit.runner.visualstudio" Version="2.3.1" /&gt;
&lt;DotNetCliToolReference Include="dotnet-xunit" Version="2.3.1" /&gt;
</code></pre>

<p>  </ItemGroup></p>

<p>  <ItemGroup></p>

<pre><code>&lt;ProjectReference Include="..\FizzBuzz\FizzBuzz.fsproj" /&gt;
</code></pre>

<p>  </ItemGroup></p>

<p></Project>
```</p>

<p>Note the line <code>&lt;PackageReference Include="FsUnit.Xunit" Version="3.0.0" /&gt;</code> (your version number might differ).</p>

<h4>Using FsUnit</h4>

<p>Modify the test file <code>FizzBuzz.Tests/Tests.fs</code> to look like this:
```fsharp
module Tests</p>

<p>open System
open FsUnit.Xunit // &lt;&mdash; add FsUnit.Xunit
open Xunit
open FizzBuzz</p>

<p>[<Fact>]
let <code>Array with Number 1 returns 'one'</code> () =</p>

<pre><code>FizzBuzz.Generate [1] 
|&gt; should equal "one" // using "|&gt;" and "should" syntax
</code></pre>

<p>```</p>

<p>Running the unit tests within the test folder:</p>

<p>```sh
dotnet test
Build started, please wait&hellip;
Build completed.</p>

<p>Test run for /home/patrick/projects/fsharp-blog-fizzbuzz/fsharp-kata-fizzbuzz/FizzBuzz.Tests/bin/Debug/netcoreapp2.0/FizzBuzz.Tests.dll(.NETCoreApp,Version=v2.0)
Microsoft &reg; Test Execution Command Line Tool Version 15.5.0
Copyright &copy; Microsoft Corporation.  All rights reserved.</p>

<p>Starting test execution, please wait&hellip;
[xUnit.net 00:00:00.7436128]   Discovering: FizzBuzz.Tests
[xUnit.net 00:00:00.8627111]   Discovered:  FizzBuzz.Tests
[xUnit.net 00:00:00.8695487]   Starting:    FizzBuzz.Tests
[xUnit.net 00:00:01.1888259]   Finished:    FizzBuzz.Tests</p>

<p>Total tests: 1. Passed: 1. Failed: 0. Skipped: 0.
Test Run Successful.
Test execution time: 2.4787 Seconds
```</p>

<h3>Summary</h3>

<p>We can now write unit tests in an F# way (&ldquo;idiomatic&rdquo;) by using the library <code>FsUnit</code>.</p>

<p>Have fun with F# and linux!</p>

<p>Get the source code <a href="https://github.com/draptik/blog-fsharp-fizzbuzz-setup">here</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[link collection #3]]></title>
    <link href="http://draptik.github.io/blog/2014/01/03/link-collection-number-3/"/>
    <updated>2014-01-03T23:30:00+00:00</updated>
    <id>http://draptik.github.io/blog/2014/01/03/link-collection-number-3</id>
    <content type="html"><![CDATA[<p>JavaScript stuff:</p>

<ul>
<li>Basics of NodeJS and ExpressJS: <a href="http://blog.modulus.io/nodejs-and-express-create-rest-api">REST</a>, <a href="http://blog.modulus.io/nodejs-and-express-basic-authentication">Authentication</a>, <a href="http://blog.modulus.io/nodejs-and-express-sessions">Sessions</a></li>
<li>Another great tutorial on SPAs: <a href="https://vickev.com/#!/article/authentication-in-single-page-applications-node-js-passportjs-angularjs">Authentication in Single Page Applications</a></li>
<li>If you&rsquo;re in for using JavaScript for your complete stack, try MEAN: <a href="http://mean.io/">mean.io</a> (Template for MongoDB, ExpressJS, AngularJS and NodeJS)</li>
<li>and here&rsquo;s a great <a href="http://www.thinkster.io/pick/GUIDJbpIie/angularjs-tutorial-learn-to-build-modern-web-apps">Tutorial on MEAN</a></li>
</ul>


<p>c# stuff:</p>

<ul>
<li>This <a href="http://www.youtube.com/watch?v=9ZSbuwCmwuc">video by Roy Osherove</a> shows how to introduce seams into brownfield projects (start at approx. 45min into the video if you want to skip the book recommendations and the intro to the SOLID principle). I learned how to introduce seams into static c# classes and methods using virtual&hellip;</li>
<li>C# psychology <a href="http://de.slideshare.net/Coverity/the-psychology-of-c-analysis-24025354">by Eric Lippert&hellip;</a></li>
<li>NHibernate turbo? (untested, but from the man himself: <a href="http://ayende.com/blog/164353/nhibernate-runfaster-secret-toggle?Key=587fe66e-0bcb-4146-96a6-cdb6e2df7df5&amp;utm_source=feedburner&amp;utm_medium=feed&amp;utm_campaign=Feed%3A+AyendeRahien+%28Ayende+%40+Rahien%29">pimping NHibernate by Ayende</a>)</li>
</ul>

]]></content>
  </entry>
  
</feed>
