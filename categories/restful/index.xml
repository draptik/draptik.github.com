<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>RESTful on draptik</title>
    <link>https://draptik.github.io/categories/restful/</link>
    <description>Recent content in RESTful on draptik</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 18 Jul 2014 18:46:33 +0000</lastBuildDate>
    
	<atom:link href="https://draptik.github.io/categories/restful/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>.NET backend providing REST</title>
      <link>https://draptik.github.io/posts/2014/07/18/dot-net-backend-providing-rest/</link>
      <pubDate>Fri, 18 Jul 2014 18:46:33 +0000</pubDate>
      
      <guid>https://draptik.github.io/posts/2014/07/18/dot-net-backend-providing-rest/</guid>
      <description>TL;DR My AngularJS demo app has a new backend implementation using .NET Web API.
&amp;hellip; Recap Our goals:
 server side: minimal working REST API providing  GET dummy CRUD users   client side (angular): communicate with server side  Setup Creating a Web API project is straightforward: Just follow the instructions at</description>
    </item>
    
    <item>
      <title>Node.js backend providing REST</title>
      <link>https://draptik.github.io/posts/2013/10/01/node-dot-js-backend-providing-rest/</link>
      <pubDate>Tue, 01 Oct 2013 21:25:00 +0000</pubDate>
      
      <guid>https://draptik.github.io/posts/2013/10/01/node-dot-js-backend-providing-rest/</guid>
      <description>TL;DR My AngularJS demo app has a new backend implementation using node.js.
&amp;hellip; After some reading I decided I&#39;ll stick with node&#39;s express module.
OK. Here is a &amp;lsquo;minimal&amp;rsquo; setup for a node.</description>
    </item>
    
    <item>
      <title>AngularJS and CORS</title>
      <link>https://draptik.github.io/posts/2013/08/19/angularjs-and-cors/</link>
      <pubDate>Mon, 19 Aug 2013 18:47:00 +0000</pubDate>
      
      <guid>https://draptik.github.io/posts/2013/08/19/angularjs-and-cors/</guid>
      <description>TL;DR While splitting my AngularJS demo app into independent back- and frontend projects (running two different servers) I stumbled across cross domain issues during development. This post describes how to implement CORS on the server and/or client side of an application.</description>
    </item>
    
    <item>
      <title>RESTful CRUD with AngularJS</title>
      <link>https://draptik.github.io/posts/2013/07/28/restful-crud-with-angularjs/</link>
      <pubDate>Sun, 28 Jul 2013 11:15:00 +0000</pubDate>
      
      <guid>https://draptik.github.io/posts/2013/07/28/restful-crud-with-angularjs/</guid>
      <description>This post will show how to perform typical CRUD (create, read, update and delete) operations in AngularJS when consuming a RESTful web service.
A prerequisite for this demo is a working RESTful web service.</description>
    </item>
    
    <item>
      <title>Unit testing RESTful services</title>
      <link>https://draptik.github.io/posts/2013/07/19/unit-testing-restful-services/</link>
      <pubDate>Fri, 19 Jul 2013 13:18:00 +0000</pubDate>
      
      <guid>https://draptik.github.io/posts/2013/07/19/unit-testing-restful-services/</guid>
      <description>In my two previous posts I gave an introduction on how to consume a RESTful web service with AngularJS created by a Java backend and use Guice in the Java backend.</description>
    </item>
    
  </channel>
</rss>