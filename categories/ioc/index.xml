<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>ioc on draptik</title>
    <link>https://draptik.github.io/categories/ioc/</link>
    <description>Recent content in ioc on draptik</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 18 Jul 2014 18:46:33 +0000</lastBuildDate>
    
	<atom:link href="https://draptik.github.io/categories/ioc/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>.NET backend providing REST</title>
      <link>https://draptik.github.io/posts/2014/07/18/dot-net-backend-providing-rest/</link>
      <pubDate>Fri, 18 Jul 2014 18:46:33 +0000</pubDate>
      
      <guid>https://draptik.github.io/posts/2014/07/18/dot-net-backend-providing-rest/</guid>
      <description>TL;DR My AngularJS demo app has a new backend implementation using .NET Web API.
&amp;hellip; Recap Our goals:
 server side: minimal working REST API providing  GET dummy CRUD users   client side (angular): communicate with server side  Setup Creating a Web API project is straightforward: Just follow the instructions at</description>
    </item>
    
    <item>
      <title>Guice in Java Web Application</title>
      <link>https://draptik.github.io/posts/2013/07/18/guice-in-java-web-application/</link>
      <pubDate>Thu, 18 Jul 2013 21:36:00 +0000</pubDate>
      
      <guid>https://draptik.github.io/posts/2013/07/18/guice-in-java-web-application/</guid>
      <description>Google&amp;rsquo;s Guice framework promises to be a lightweight(!) Inversion-of-Control (IoC) container.
Advantages compared to Spring:
 Spring is much more than an IoC container, and therefore overkill for many projects. Configuration by code.</description>
    </item>
    
  </channel>
</rss>