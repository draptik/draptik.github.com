<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>tdd on draptik</title>
    <link>https://draptik.github.io/categories/tdd/</link>
    <description>Recent content in tdd on draptik</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 25 Feb 2020 00:49:53 +0100</lastBuildDate>
    
	<atom:link href="https://draptik.github.io/categories/tdd/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>TDD Money Step-by-Step in C#</title>
      <link>https://draptik.github.io/posts/2020/02/25/tdd-money-step-by-step-in-c/</link>
      <pubDate>Tue, 25 Feb 2020 00:49:53 +0100</pubDate>
      
      <guid>https://draptik.github.io/posts/2020/02/25/tdd-money-step-by-step-in-c/</guid>
      <description>While preparing a TDD workshop, I ported Kent Beck&amp;rsquo;s Money example from the book &amp;ldquo;Test-Driven Development by Example&amp;rdquo;
 to C# using .NET Core  I&amp;rsquo;ve tried to map each change described in the book to a dedicated git commit with a sensible commit message.</description>
    </item>
    
    <item>
      <title>F# Test Setup for FizzBuzz</title>
      <link>https://draptik.github.io/posts/2018/02/07/fsharp-test-setup-for-fizzbuzz/</link>
      <pubDate>Wed, 07 Feb 2018 20:53:43 +0000</pubDate>
      
      <guid>https://draptik.github.io/posts/2018/02/07/fsharp-test-setup-for-fizzbuzz/</guid>
      <description>In my previous post we setup a basic F# project in Linux.
In this post I would like to show how to setup an idiomatic F# testing environment using FsUnit.</description>
    </item>
    
    <item>
      <title>Testing that different objects have the same properties</title>
      <link>https://draptik.github.io/posts/2016/05/09/testing-objects-have-same-properties/</link>
      <pubDate>Mon, 09 May 2016 19:25:17 +0000</pubDate>
      
      <guid>https://draptik.github.io/posts/2016/05/09/testing-objects-have-same-properties/</guid>
      <description>Sometimes you want to ensure that 2 unrelated objects share a set of properties &amp;ndash; without using an interface.
Here is an example:
namespace Demo { public class Customer { public string FirstName { get; set; } public string LastName { get; set; } } public class Person { public string FirstName { get; set; } public string LastName { get; set; } } } First thought for C# developers: AutoMapper</description>
    </item>
    
  </channel>
</rss>