<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>fsharp on draptik</title>
    <link>https://draptik.github.io/categories/fsharp/</link>
    <description>Recent content in fsharp on draptik</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 10 Feb 2020 22:20:01 +0100</lastBuildDate><atom:link href="https://draptik.github.io/categories/fsharp/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>F# Smart Constructor</title>
      <link>https://draptik.github.io/posts/2020/02/10/fsharp-smart-constructor/</link>
      <pubDate>Mon, 10 Feb 2020 22:20:01 +0100</pubDate>
      
      <guid>https://draptik.github.io/posts/2020/02/10/fsharp-smart-constructor/</guid>
      <description>The &amp;ldquo;Smart Constructor&amp;rdquo; pattern allows us to create a type with F#. With validation.
TL/DR Here is the F# boiler plate needed to implement the Value Object pattern.
let UserName = private UserName of string module UserName = let isValid s = // .</description>
    </item>
    
    <item>
      <title>F#: Function Signature</title>
      <link>https://draptik.github.io/posts/2020/02/05/fsharp-function-signature/</link>
      <pubDate>Wed, 05 Feb 2020 08:54:33 +0100</pubDate>
      
      <guid>https://draptik.github.io/posts/2020/02/05/fsharp-function-signature/</guid>
      <description>I always forget how to write Haskell-like function signatures in F#.
type AddOne = int -&amp;gt; int let addOne : AddOne = fun i -&amp;gt; i + 1 You can think of AddOne as an interface in OO-languages, for functions.</description>
    </item>
    
    <item>
      <title>F# Linux: mixed feelings</title>
      <link>https://draptik.github.io/posts/2018/11/29/fsharp-linux-mixed-feelings/</link>
      <pubDate>Thu, 29 Nov 2018 00:58:33 +0000</pubDate>
      
      <guid>https://draptik.github.io/posts/2018/11/29/fsharp-linux-mixed-feelings/</guid>
      <description>I have been trying to learn F# with .NET Core and Linux for some time. My experience so far are mixed. Let me explain what I mean by &amp;ldquo;mixed&amp;rdquo;:
First off all: It is great that we can use .</description>
    </item>
    
    <item>
      <title>F# Test Setup for FizzBuzz</title>
      <link>https://draptik.github.io/posts/2018/02/07/fsharp-test-setup-for-fizzbuzz/</link>
      <pubDate>Wed, 07 Feb 2018 20:53:43 +0000</pubDate>
      
      <guid>https://draptik.github.io/posts/2018/02/07/fsharp-test-setup-for-fizzbuzz/</guid>
      <description>In my previous post we setup a basic F# project in Linux.
In this post I would like to show how to setup an idiomatic F# testing environment using FsUnit.</description>
    </item>
    
    <item>
      <title>F# Setup Linux: FizzBuzz</title>
      <link>https://draptik.github.io/posts/2018/02/05/fsharp-setup-linux-fizzbuzz/</link>
      <pubDate>Mon, 05 Feb 2018 22:31:04 +0000</pubDate>
      
      <guid>https://draptik.github.io/posts/2018/02/05/fsharp-setup-linux-fizzbuzz/</guid>
      <description>One of the first things I always struggle with when learning new languages is the environment. Here is a simple setup for playing with F# and Linux.
Prerequisite: .NET Core with Linux I won&amp;rsquo;t go into setting up .</description>
    </item>
    
  </channel>
</rss>
