<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>domain-driven-design on draptik</title>
    <link>https://draptik.github.io/categories/domain-driven-design/</link>
    <description>Recent content in domain-driven-design on draptik</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 10 Feb 2020 22:20:01 +0100</lastBuildDate><atom:link href="https://draptik.github.io/categories/domain-driven-design/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>F# Smart Constructor</title>
      <link>https://draptik.github.io/posts/2020/02/10/fsharp-smart-constructor/</link>
      <pubDate>Mon, 10 Feb 2020 22:20:01 +0100</pubDate>
      
      <guid>https://draptik.github.io/posts/2020/02/10/fsharp-smart-constructor/</guid>
      <description>The &amp;ldquo;Smart Constructor&amp;rdquo; pattern allows us to create a type with F#. With validation.
TL/DR Here is the F# boiler plate needed to implement the Value Object pattern.
type UserName = private UserName of string module UserName = let isValid s = // .</description>
    </item>
    
    <item>
      <title>F#: Function Signature</title>
      <link>https://draptik.github.io/posts/2020/02/05/fsharp-function-signature/</link>
      <pubDate>Wed, 05 Feb 2020 08:54:33 +0100</pubDate>
      
      <guid>https://draptik.github.io/posts/2020/02/05/fsharp-function-signature/</guid>
      <description>I always forget how to write Haskell-like function signatures in F#.
type AddOne = int -&amp;gt; int let addOne : AddOne = fun i -&amp;gt; i + 1 You can think of AddOne as an interface in OO-languages, for functions.</description>
    </item>
    
    <item>
      <title>Review: Hands-On Domain-Driven Design with .NET Core by Alexey Zimarev</title>
      <link>https://draptik.github.io/posts/2019/06/25/review-hands-on-ddd-dotnetcore/</link>
      <pubDate>Tue, 25 Jun 2019 21:42:37 +0000</pubDate>
      
      <guid>https://draptik.github.io/posts/2019/06/25/review-hands-on-ddd-dotnetcore/</guid>
      <description>I have updated this post because the author took the time to respond to my review.
 TL;DR The book Hands-On Domain-Driven-Design with .NET Core by Alexey Zimarev illustrates the pros &amp;amp; cons of different CQRS/ES persistency options in the .</description>
    </item>
    
  </channel>
</rss>
